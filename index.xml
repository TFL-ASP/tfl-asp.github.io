<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>改BUG的大橘</title>
        <link>https://tflasp.fun/</link>
        <description>Recent content on 改BUG的大橘</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Thu, 26 Sep 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://tflasp.fun/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>【教程】保障数据安全，关闭Bitlocker</title>
        <link>https://tflasp.fun/2024/disable-bitlocker/</link>
        <pubDate>Thu, 26 Sep 2024 00:00:00 +0000</pubDate>
        
        <guid>https://tflasp.fun/2024/disable-bitlocker/</guid>
        <description>&lt;img src="https://tflasp.fun/2024/disable-bitlocker/slug.png" alt="Featured image of post 【教程】保障数据安全，关闭Bitlocker" /&gt;&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;近期有几个朋友笔记本硬盘坏了，拿去恢复数据，硬件层面的问题解决后发现硬盘有BitLocker加密，而他全然不知道此事，微软账号里也没有备份，所以数据也就无法找回了。这也是我写这篇文章的原因之一。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;BitLocker 是一项 Windows 安全功能，可为整个卷提供加密，解决因设备丢失、被盗或不适当停用而导致数据被盗或泄露的威胁。但是，&lt;strong&gt;在2020年后的新笔记本电脑一般已开启Bitlocker功能（即硬盘中数据已被加密）&lt;/strong&gt;，若计算机硬件有改变或损坏，重新进入已加密的系统会要求输入“恢复密钥”，如下图。&lt;strong&gt;若密钥丢失，则加密分区中的数据全部丢失！&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果的确担心数据安全或有重要数据，请&lt;strong&gt;及时备份密钥&lt;/strong&gt;（或使用其他加密软件，如：&lt;code&gt;VeraCrypt&lt;/code&gt;），或者按照公司要求保存在指定驱动器里！&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 222; 
			flex-basis: 533px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/disable-bitlocker/recovery.png&#34; data-size=&#34;676x304&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/disable-bitlocker/recovery.png&#34;
			width=&#34;676&#34;
			height=&#34;304&#34;
			srcset=&#34;https://tflasp.fun/2024/disable-bitlocker/recovery_hu5c1f7f68b6da2f524f10fc57c5d65e43_137490_480x0_resize_box_3.png 480w, https://tflasp.fun/2024/disable-bitlocker/recovery_hu5c1f7f68b6da2f524f10fc57c5d65e43_137490_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;Bitlocker恢复界面（将会在开机时显示）&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;Bitlocker恢复界面（将会在开机时显示）&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;原理&#34;&gt;原理&lt;/h2&gt;
&lt;p&gt;若对原理不感兴趣可以 &lt;a class=&#34;link&#34; href=&#34;&#34; &gt;往下翻&lt;/a&gt; 或 &lt;a class=&#34;link&#34; href=&#34;&#34; &gt;单击右侧目录栏跳转至“&lt;strong&gt;解密方法&lt;/strong&gt;”&lt;/a&gt; 以查看解密步骤！&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 127; 
			flex-basis: 306px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/disable-bitlocker/bitlocker.png&#34; data-size=&#34;669x524&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/disable-bitlocker/bitlocker.png&#34;
			width=&#34;669&#34;
			height=&#34;524&#34;
			srcset=&#34;https://tflasp.fun/2024/disable-bitlocker/bitlocker_hu351eb91ec3bf236eb95b8deb32d48588_314421_480x0_resize_box_3.png 480w, https://tflasp.fun/2024/disable-bitlocker/bitlocker_hu351eb91ec3bf236eb95b8deb32d48588_314421_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;Bitlocker使用TPM解密 原理图（图源：MSDN）&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;Bitlocker使用TPM解密 原理图（图源：MSDN）&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;图解：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;BIOS 启动并初始化TPM。并measure firmware部分敏感内容和启动分区以及bootloader，将结果放入PCR组。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;2.如果 PCR 值与期望值相匹配，则 TPM 将使用存储根密钥 (SRK) 对卷主密钥 (VMK) 进行解密。&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;
&lt;p&gt;从卷中读取加密 FVEK，并使用解密 VMK 对其进行解密。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;访问磁盘扇区时，使用 FVEK 进行解密。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;为应用程序和过程提供解密数据。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;其中SRK存储在TPM芯片中，它是整个过程的信任根。BitLocker通过检测PCR组，对主启动记录 (MBR) 代码、NTFS 启动扇区、NTFS 启动块、启动管理器和其他重要组件进行检查，如果被更改，则第2步将出错，要求输入recovery PIN值。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;详细原理请跳转至Microsoft官方文档：&lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/windows/security/operating-system-security/data-protection/bitlocker/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Microsoft Learn: BitLocker overview&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;触发条件&#34;&gt;触发条件&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;1，更换主板（100%触发，把硬盘拆下做成移动硬盘也在此列）

2，修改高级启动设置（高概率）

3，同一台电脑上存在两个以上的系统盘或引导（高概率，PE应该也在此列）

4，更换CPU/内存/显卡/网卡/加装硬盘（低概率）

5，更新BIOS（低概率）

6，Win10更新时崩溃卡死（低概率）
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;解密方法-windows1011通用&#34;&gt;解密方法 (Windows10/11通用)&lt;/h2&gt;
&lt;p&gt;以下内容涉及图片较多，建议打开Github加速器查看。&lt;/p&gt;
&lt;h3 id=&#34;辨别当前磁盘状态&#34;&gt;辨别当前磁盘状态&lt;/h3&gt;
&lt;h4 id=&#34;case-1-无需解密&#34;&gt;Case 1 （无需解密）&lt;/h4&gt;
&lt;p&gt;打开“此电脑”，若磁盘图标同下，则磁盘未被加密，无需进行任何操作！！&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 1088; 
			flex-basis: 2612px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/disable-bitlocker/status1.png&#34; data-size=&#34;762x70&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/disable-bitlocker/status1.png&#34;
			width=&#34;762&#34;
			height=&#34;70&#34;
			srcset=&#34;https://tflasp.fun/2024/disable-bitlocker/status1_hu19fa987ca6fc814523aff5dbee594014_5893_480x0_resize_box_3.png 480w, https://tflasp.fun/2024/disable-bitlocker/status1_hu19fa987ca6fc814523aff5dbee594014_5893_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;磁盘上无任何标记，未被加密&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;磁盘上无任何标记，未被加密&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&#34;case-2-需要解密&#34;&gt;Case 2 （需要解密）&lt;/h4&gt;
&lt;p&gt;磁盘上有带锁图标且存在感叹号，该磁盘已被加密，但还缺失连接账户的步骤！普通用户建议直接解密。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 362; 
			flex-basis: 870px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/disable-bitlocker/status2.png&#34; data-size=&#34;254x70&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/disable-bitlocker/status2.png&#34;
			width=&#34;254&#34;
			height=&#34;70&#34;
			srcset=&#34;https://tflasp.fun/2024/disable-bitlocker/status2_hu0bd0f26ae9bd93285e3f90a2fecb25c0_15574_480x0_resize_box_3.png 480w, https://tflasp.fun/2024/disable-bitlocker/status2_hu0bd0f26ae9bd93285e3f90a2fecb25c0_15574_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;磁盘上有带锁图标且存在感叹号，该磁盘已被加密，但还缺失连接账户的步骤&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;磁盘上有带锁图标且存在感叹号，该磁盘已被加密，但还缺失连接账户的步骤&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&#34;case-3-需要解密&#34;&gt;Case 3 （需要解密）&lt;/h4&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 390; 
			flex-basis: 937px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/disable-bitlocker/status3.png&#34; data-size=&#34;254x65&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/disable-bitlocker/status3.png&#34;
			width=&#34;254&#34;
			height=&#34;65&#34;
			srcset=&#34;https://tflasp.fun/2024/disable-bitlocker/status3_huc3b3d67649efda639b360f81b75aa60f_8483_480x0_resize_box_3.png 480w, https://tflasp.fun/2024/disable-bitlocker/status3_huc3b3d67649efda639b360f81b75aa60f_8483_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;磁盘上出现打开的锁，该磁盘已被完全加密&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;磁盘上出现打开的锁，该磁盘已被完全加密&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;解密步骤请务必判断自身磁盘状态后进行操作&#34;&gt;解密步骤（请务必判断自身磁盘状态后进行操作）&lt;/h3&gt;
&lt;p&gt;同时按Windows徽标键+R 调出 运行，并输入control，回车&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 181; 
			flex-basis: 434px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/disable-bitlocker/step1.png&#34; data-size=&#34;395x218&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/disable-bitlocker/step1.png&#34;
			width=&#34;395&#34;
			height=&#34;218&#34;
			srcset=&#34;https://tflasp.fun/2024/disable-bitlocker/step1_hu1ad58a6de2d5dce3a768a2028ff668c4_42263_480x0_resize_box_3.png 480w, https://tflasp.fun/2024/disable-bitlocker/step1_hu1ad58a6de2d5dce3a768a2028ff668c4_42263_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;同时按Windows徽标键&amp;#43;R 调出 运行，并输入control，回车&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;同时按Windows徽标键+R 调出 运行，并输入control，回车&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;将查看方式改为“小图标”&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 179; 
			flex-basis: 430px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/disable-bitlocker/step2.png&#34; data-size=&#34;1109x618&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/disable-bitlocker/step2.png&#34;
			width=&#34;1109&#34;
			height=&#34;618&#34;
			srcset=&#34;https://tflasp.fun/2024/disable-bitlocker/step2_hud75ad39012b4948563eaa812025e936e_246769_480x0_resize_box_3.png 480w, https://tflasp.fun/2024/disable-bitlocker/step2_hud75ad39012b4948563eaa812025e936e_246769_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;将查看方式改为“小图标”&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;将查看方式改为“小图标”&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;单击“Bitlocker驱动器加密”&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 223; 
			flex-basis: 536px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/disable-bitlocker/step3.png&#34; data-size=&#34;1126x504&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/disable-bitlocker/step3.png&#34;
			width=&#34;1126&#34;
			height=&#34;504&#34;
			srcset=&#34;https://tflasp.fun/2024/disable-bitlocker/step3_hua87df2787f3a286621259056406910b0_221800_480x0_resize_box_3.png 480w, https://tflasp.fun/2024/disable-bitlocker/step3_hua87df2787f3a286621259056406910b0_221800_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;单击“Bitlocker驱动器加密”&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;单击“Bitlocker驱动器加密”&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;选择要解密的驱动器，单击“关闭BitLocker，并授予权限&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 115; 
			flex-basis: 276px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/disable-bitlocker/step4.png&#34; data-size=&#34;612x532&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/disable-bitlocker/step4.png&#34;
			width=&#34;612&#34;
			height=&#34;532&#34;
			srcset=&#34;https://tflasp.fun/2024/disable-bitlocker/step4_hu7b09272d50ebb46126ef10c50b65985d_163230_480x0_resize_box_3.png 480w, https://tflasp.fun/2024/disable-bitlocker/step4_hu7b09272d50ebb46126ef10c50b65985d_163230_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;选择要解密的驱动器，单击“关闭BitLocker”，并授予权限&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;选择要解密的驱动器，单击“关闭BitLocker”，并授予权限&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;注意：解密过程会消耗一段时间，根据磁盘性能和磁盘内已有文件大小相关，解密时可正常使用电脑，期间可以关机，但是异常断电会导致数据丢失！！！
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;若需输入恢复密钥，可在微软账户里寻找到密钥，&lt;strong&gt;&lt;a class=&#34;link&#34; href=&#34;https://account.microsoft.com/devices/recoverykey?refd=account.microsoft.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;微软官网&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 244; 
			flex-basis: 587px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/disable-bitlocker/key.png&#34; data-size=&#34;1232x503&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/disable-bitlocker/key.png&#34;
			width=&#34;1232&#34;
			height=&#34;503&#34;
			srcset=&#34;https://tflasp.fun/2024/disable-bitlocker/key_hu3cb8847aa3b1670fecacda07b21d02d2_244148_480x0_resize_box_3.png 480w, https://tflasp.fun/2024/disable-bitlocker/key_hu3cb8847aa3b1670fecacda07b21d02d2_244148_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;密钥示例&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;密钥示例&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;将密钥ID与设备上的密钥ID匹配后，输入正确的恢复密钥即可解密。&lt;/p&gt;
&lt;h2 id=&#34;参考资料&#34;&gt;参考资料&lt;/h2&gt;
&lt;p&gt;[1] &lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/windows/security/hardware-security/tpm/tpm-fundamentals&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Microsoft Learn/Windows/Security &lt;strong&gt;TPM fundamentals&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[2] &lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/en-us/windows/security/operating-system-security/data-protection/bitlocker/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Microsoft Learn/Windows/Security &lt;strong&gt;BitLocker countermeasures&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;[3] &lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/29840740&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Bitlocker、TPM和系统安全&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>【归档】旧主板BIOS添加nvme驱动</title>
        <link>https://tflasp.fun/2024/bios_nvme/</link>
        <pubDate>Wed, 28 Aug 2024 00:00:00 +0000</pubDate>
        
        <guid>https://tflasp.fun/2024/bios_nvme/</guid>
        <description>&lt;h2 id=&#34;准备工作&#34;&gt;准备工作&lt;/h2&gt;
&lt;p&gt;首先准备待刷BIOS的主板，我手上的是华硕B85M-F PLUS，以及一台能正常使用的联网的电脑，一个u盘（&lt;code&gt;重要数据建议备份&lt;/code&gt;）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;注意，尽量不要在网上找做好的BIOS文件来刷，每个品牌主板各个系列下面还有很多子型号以及rev版本，BIOS都是不一样的，刷错了容易变砖（也可以用编程器刷回去，但完全没必要去踩这个坑）
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;提取本机bios&#34;&gt;提取本机BIOS&lt;/h2&gt;
&lt;p&gt;使用&lt;a class=&#34;link&#34; href=&#34;https://wwz.lanzoul.com/it3l328llona&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;BIOSBackupTool&lt;/a&gt;（提取码：64u3）进行备份本机BIOS&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 189; 
			flex-basis: 455px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/bios_nvme/bios_out.jpg&#34; data-size=&#34;467x246&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/bios_nvme/bios_out.jpg&#34;
			width=&#34;467&#34;
			height=&#34;246&#34;
			srcset=&#34;https://tflasp.fun/2024/bios_nvme/bios_out_hu1bb952bca1648c5a906363b1191765b1_30986_480x0_resize_q75_box.jpg 480w, https://tflasp.fun/2024/bios_nvme/bios_out_hu1bb952bca1648c5a906363b1191765b1_30986_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;注意自定义一栏修改大小到自己主板bios芯片的大小（看芯片丝印，实在不行自己一点点试）&lt;/p&gt;
&lt;p&gt;单击读取，进度达到100%时，备份BIOS文件到桌面（暂存）。&lt;/p&gt;
&lt;p&gt;给BIOS文件取一个简单的名字（方便后续在Shell里操作，一般是用BIOS版本号）&lt;/p&gt;
&lt;h2 id=&#34;添加nvme模块&#34;&gt;添加NVMe模块&lt;/h2&gt;
&lt;p&gt;下载&lt;a class=&#34;link&#34; href=&#34;https://wwz.lanzoul.com/iyr2Y28lluyh&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;MMTool&lt;/a&gt;（提取码：2up8）&lt;/p&gt;
&lt;p&gt;下载&lt;a class=&#34;link&#34; href=&#34;https://wwz.lanzoul.com/iBEqJ28lnk9e&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;NVMe驱动&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;打开MMTool，点击LoadImage，选择刚刚备份的BIOS（.rom或.cap），下拉找到CSMCORE，选中）&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 126; 
			flex-basis: 302px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/bios_nvme/MMTOOL-1.jpg&#34; data-size=&#34;958x760&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/bios_nvme/MMTOOL-1.jpg&#34;
			width=&#34;958&#34;
			height=&#34;760&#34;
			srcset=&#34;https://tflasp.fun/2024/bios_nvme/MMTOOL-1_hu2ca56b75fa77ce179851577feef1779c_155298_480x0_resize_q75_box.jpg 480w, https://tflasp.fun/2024/bios_nvme/MMTOOL-1_hu2ca56b75fa77ce179851577feef1779c_155298_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在模块文件后点预览（如上图），选择刚刚下载好的NVMe驱动，选择压缩版最好。&lt;/p&gt;
&lt;p&gt;最后另存映像在路径里，注意使用不同的文件名称区分开&lt;code&gt;不要用中文！&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;刷写bios&#34;&gt;刷写BIOS&lt;/h2&gt;
&lt;p&gt;此步骤根据主板的不同有些许不同，如果使用原BIOS自带的刷写方法的话，有可能新BIOS文件无法通过校验导致刷写失败。如果用华硕的AI suite软件刷写则需要（.cap）文件。并且御三家以外的主板BIOS可能没有刷写BIOS的功能。在此介绍一个通用的使用EFI Shell刷写BIOS。&lt;/p&gt;
&lt;p&gt;首先在原BIOS中改为UEFI启动。&lt;/p&gt;
&lt;p&gt;拿出U盘，插在能正常使用的电脑上，格式化为&lt;code&gt;FAT32格式&lt;/code&gt;（若已经是，则忽略此步骤）。&lt;/p&gt;
&lt;p&gt;下载&lt;a class=&#34;link&#34; href=&#34;https://wwz.lanzoul.com/irZhR28lm3jg&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;EFI Shell刷写工具&lt;/a&gt;，拷贝整个压缩包内EFI文件夹到U盘根目录，同时将已经添加过NVMe模块的.rom文件复制到\EFI\BIOS\中&lt;/p&gt;
&lt;p&gt;安全弹出U盘，插入待刷主板，开机按&lt;code&gt;F8&lt;/code&gt;（不同主板有所不同）选择启动设备，找到U盘，回车进入EFI Shell&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 139; 
			flex-basis: 334px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/bios_nvme/SHELL.jpg&#34; data-size=&#34;681x489&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/bios_nvme/SHELL.jpg&#34;
			width=&#34;681&#34;
			height=&#34;489&#34;
			srcset=&#34;https://tflasp.fun/2024/bios_nvme/SHELL_hu8efec03471d3ed058c037eee85d15371_134685_480x0_resize_q75_box.jpg 480w, https://tflasp.fun/2024/bios_nvme/SHELL_hu8efec03471d3ed058c037eee85d15371_134685_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;及时按下&lt;code&gt;ESC&lt;/code&gt;跳过&lt;code&gt;startup.nsh&lt;/code&gt;，记下自己U盘的设备编号。&lt;/p&gt;
&lt;p&gt;//将下文命令中&lt;code&gt;0503.rom&lt;/code&gt;换成自己的BIOS文件名&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;shell&amp;gt; fs3:
fs3:&amp;gt; cd \EFI\BOOT\
fs3:\EFI\BOOT&amp;gt; afugan 0503.rom /GAN
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;等待刷写完成后，直接按下关机键，拔下U盘，重启进入BIOS查看是否可以通过NVMe硬盘启动。（如果BIOS内还是无法识别，重启按F8直接选择启动设备，实测部分华硕主板会出现该问题）&lt;/p&gt;
</description>
        </item>
        <item>
        <title>【归档】Ubuntu20.04下安装Docker</title>
        <link>https://tflasp.fun/2024/docker-setup-ubuntu/</link>
        <pubDate>Fri, 23 Aug 2024 00:00:00 +0000</pubDate>
        
        <guid>https://tflasp.fun/2024/docker-setup-ubuntu/</guid>
        <description>&lt;p&gt;以 ubuntu 20.04（也包括作为桌面使用的 Linux Mint 21） 为例，参考官网文档：&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://docs.docker.com/install/linux/docker-ce/ubuntu/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://docs.docker.com/install/linux/docker-ce/ubuntu/&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;安装准备&#34;&gt;安装准备&lt;/h2&gt;
&lt;p&gt;看一下自己的Linux机器版本和内核信息：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;uname --all&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Linux skywork 5.15.0-53-generic #59-Ubuntu SMP Mon Oct 17 18:53:30 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;cat /proc/version&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Linux version 5.15.0-53-generic (buildd@lcy02-amd64-047) (gcc (Ubuntu 11.2.0-19ubuntu1) 11.2.0, GNU ld (GNU Binutils for Ubuntu) 2.38) #59-Ubuntu SMP Mon Oct 17 18:53:30 UTC 2022
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;lsb_release -a&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;No LSB modules are available.
Distributor ID:	Linuxmint
Description:	Linux Mint 21
Release:	21
Codename:	vanessa
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这台机器是Linux Mint 21 升级到非常新的Linux内核5.15.0-53了，Linux Mint 21 是基于 Ubuntu 20.04，但是有些系统参数不一样，比如这里 Codename 是 &lt;code&gt;vanessa&lt;/code&gt;，而不是 Ubuntu 20.04 的 &lt;code&gt;Focal Fossa&lt;/code&gt;。后面安装时要小心，需要修改为 Ubuntu 20.04 的参数。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ubuntu各个版本的codename 请见：&lt;a class=&#34;link&#34; href=&#34;https://download.docker.com/linux/ubuntu/dists/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://download.docker.com/linux/ubuntu/dists/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;安装步骤&#34;&gt;安装步骤&lt;/h2&gt;
&lt;h3 id=&#34;卸载旧版本&#34;&gt;卸载旧版本&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get remove docker docker-engine docker.io containerd runc
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;安装docker&#34;&gt;安装docker&lt;/h3&gt;
&lt;p&gt;简单起见，使用 docker 仓库安装。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo apt-get install ca-certificates curl gnupg lsb-release

$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg

# 官方给的是这样，
# echo \
#  &amp;quot;deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] \
# https://download.docker.com/linux/ubuntu \
#  $(lsb_release -cs) stable&amp;quot; | sudo tee /etc/apt/sources.list.d/docker.list &amp;gt; /dev/null
# 但是`lsb_release -cs`在Linux Mint下取值会不对，因此手工修改
# for ubuntu 20.04 / linuxmint 20.02，$(lsb_release -cs)替代为 focal
$ echo \
&amp;quot;deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu focal stable&amp;quot; | sudo tee /etc/apt/sources.list.d/docker.list &amp;gt; /dev/null

$ sudo apt-get update
$ sudo apt-get install docker-ce docker-ce-cli containerd.io
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果不想安装最新版本，则可以先查看当前可选版本：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ apt-cache madison docker-ce
docker-ce | 5:20.10.21~3-0~ubuntu-focal | https://download.docker.com/linux/ubuntu focal/stable amd64 Packages
 docker-ce | 5:20.10.20~3-0~ubuntu-focal | https://download.docker.com/linux/ubuntu focal/stable amd64 Packages
 docker-ce | 5:20.10.19~3-0~ubuntu-focal | https://download.docker.com/linux/ubuntu focal/stable amd64 Packages
 docker-ce | 5:20.10.18~3-0~ubuntu-focal | https://download.docker.com/linux/ubuntu focal/stable amd64 Packages
 docker-ce | 5:20.10.17~3-0~ubuntu-focal | https://download.docker.com/linux/ubuntu focal/stable amd64 Packages
 docker-ce | 5:20.10.16~3-0~ubuntu-focal | https://download.docker.com/linux/ubuntu focal/stable amd64 Packages
 docker-ce | 5:20.10.15~3-0~ubuntu-focal | https://download.docker.com/linux/ubuntu focal/stable amd64 Packages
 docker-ce | 5:20.10.14~3-0~ubuntu-focal | https://download.docker.com/linux/ubuntu focal/stable amd64 Packages
 docker-ce | 5:20.10.13~3-0~ubuntu-focal | https://download.docker.com/linux/ubuntu focal/stable amd64 Packages
 docker-ce | 5:20.10.12~3-0~ubuntu-focal | https://download.docker.com/linux/ubuntu focal/stable amd64 Packages
 docker-ce | 5:20.10.11~3-0~ubuntu-focal | https://download.docker.com/linux/ubuntu focal/stable amd64 Packages
 docker-ce | 5:20.10.10~3-0~ubuntu-focal | https://download.docker.com/linux/ubuntu focal/stable amd64 Packages
 docker-ce | 5:20.10.9~3-0~ubuntu-focal | https://download.docker.com/linux/ubuntu focal/stable amd64 Packages
 docker-ce | 5:20.10.8~3-0~ubuntu-focal | https://download.docker.com/linux/ubuntu focal/stable amd64 Packages
 docker-ce | 5:20.10.7~3-0~ubuntu-focal | https://download.docker.com/linux/ubuntu focal/stable amd64 Packages
 docker-ce | 5:20.10.6~3-0~ubuntu-focal | https://download.docker.com/linux/ubuntu focal/stable amd64 Packages
 docker-ce | 5:20.10.5~3-0~ubuntu-focal | https://download.docker.com/linux/ubuntu focal/stable amd64 Packages
 docker-ce | 5:20.10.4~3-0~ubuntu-focal | https://download.docker.com/linux/ubuntu focal/stable amd64 Packages
 docker-ce | 5:20.10.3~3-0~ubuntu-focal | https://download.docker.com/linux/ubuntu focal/stable amd64 Packages
 docker-ce | 5:20.10.2~3-0~ubuntu-focal | https://download.docker.com/linux/ubuntu focal/stable amd64 Packages
 docker-ce | 5:20.10.1~3-0~ubuntu-focal | https://download.docker.com/linux/ubuntu focal/stable amd64 Packages
 docker-ce | 5:20.10.0~3-0~ubuntu-focal | https://download.docker.com/linux/ubuntu focal/stable amd64 Packages
 docker-ce | 5:19.03.15~3-0~ubuntu-focal | https://download.docker.com/linux/ubuntu focal/stable amd64 Packages
 docker-ce | 5:19.03.14~3-0~ubuntu-focal | https://download.docker.com/linux/ubuntu focal/stable amd64 Packages
 docker-ce | 5:19.03.13~3-0~ubuntu-focal | https://download.docker.com/linux/ubuntu focal/stable amd64 Packages
 docker-ce | 5:19.03.12~3-0~ubuntu-focal | https://download.docker.com/linux/ubuntu focal/stable amd64 Packages
 docker-ce | 5:19.03.11~3-0~ubuntu-focal | https://download.docker.com/linux/ubuntu focal/stable amd64 Packages
 docker-ce | 5:19.03.10~3-0~ubuntu-focal | https://download.docker.com/linux/ubuntu focal/stable amd64 Packages
 docker-ce | 5:19.03.9~3-0~ubuntu-focal | https://download.docker.com/linux/ubuntu focal/stable amd64 Packages
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后执行 :&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install docker-ce=20.10.21~3-0~ubuntu
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;验证安装&#34;&gt;验证安装&lt;/h3&gt;
&lt;p&gt;安装完成之后，看一下版本信息：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker --version
Docker version 20.10.21, build baeda1f
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;验证一下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo docker run hello-world
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo docker run hello-world
Unable to find image &#39;hello-world:latest&#39; locally

latest: Pulling from library/hello-world
2db29710123e: Pull complete 
Digest: sha256:faa03e786c97f07ef34423fccceeec2398ec8a5759259f94d99078f264e9d7af
Status: Downloaded newer image for hello-world:latest

Hello from Docker!
This message shows that your installation appears to be working correctly.
...
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;设置权限避免每次sudo&#34;&gt;设置权限避免每次sudo&lt;/h3&gt;
&lt;p&gt;为了以非root用户使用docker, 可以将用户加入&amp;quot;docker&amp;quot;组.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo usermod -aG docker sky
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;重新登录之后生效。&lt;/p&gt;
&lt;h3 id=&#34;设置docker的cgroup-driver&#34;&gt;设置docker的cgroup driver&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;备注： 发现 docker 20.10.21&lt;del&gt;3-0&lt;/del&gt;ubuntu 版本已经修改为默认 systemd ，因此新版本可以不用这么设置。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;docker 默认的 cgroup driver 是 cgroupfs，可以通过 docker info 命令查看：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker info | grep &amp;quot;Cgroup Driver&amp;quot;
Cgroup Driver: cgroupfs
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;而 kubernetes 在v1.22版本之后，如果用户没有在 KubeletConfiguration 下设置 cgroupDriver 字段，则 kubeadm 将默认为 &lt;code&gt;systemd&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;为了保持一致，需要修改 docker 的 cgroup driver 为 &lt;code&gt;systemd&lt;/code&gt;, 方式为打开 docker 的配置文件（如果不存在则创建）&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo vi /etc/docker/daemon.json
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;增加内容：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
	&amp;quot;exec-opts&amp;quot;: [&amp;quot;native.cgroupdriver=systemd&amp;quot;]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;修改完成后重启 docker：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo systemctl restart docker

# 重启后检查一下
docker info | grep &amp;quot;Cgroup Driver&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;设置swap-limit&#34;&gt;设置swap limit&lt;/h3&gt;
&lt;p&gt;如果遇到如下的 &amp;ldquo;No swap limit support&amp;rdquo; 警告：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker info | grep &amp;quot;Cgroup Driver&amp;quot;
 Cgroup Driver: systemd
WARNING: No swap limit support
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;则说明 swap limit 功能没能开启。解决方法是 grub&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo vi /etc/default/grub
......
GRUB_CMDLINE_LINUX=&amp;quot;cgroup_enable=memory swapaccount=1&amp;quot;
......
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;如果 GRUB_CMDLINE_LINUX= 内有内容，切记不可删除，只需在后面追加，并用空格和前面的内容分隔开。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;执行下面命令生效并重启。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo update-grub2
$ sudo reboot
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;参考资料&#34;&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.k2zone.cn/?p=2356&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.k2zone.cn/?p=2356&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://unix.stackexchange.com/questions/342735/docker-warning-no-swap-limit-support&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://unix.stackexchange.com/questions/342735/docker-warning-no-swap-limit-support&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>工具包分享</title>
        <link>https://tflasp.fun/2024/links/</link>
        <pubDate>Fri, 23 Aug 2024 00:00:00 +0000</pubDate>
        
        <guid>https://tflasp.fun/2024/links/</guid>
        <description>&lt;p&gt;下载时记得关闭杀毒软件，若被误杀请重新下载。&lt;/p&gt;
&lt;p&gt;资料由站长收集整理，仅供学习交流，&lt;strong&gt;严禁用于商业用途&lt;/strong&gt;，请于24小时内删除。&lt;/p&gt;
&lt;h2 id=&#34;系统优化工具&#34;&gt;系统优化工具&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Password&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a class=&#34;link&#34; href=&#34;https://wwz.lanzoul.com/igQrO22q417i&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Windows10永久数字激活工具&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;\&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a class=&#34;link&#34; href=&#34;https://wwz.lanzoul.com/i6BiS22q40lg&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Geek Uninstaller卸载工具&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;\&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a class=&#34;link&#34; href=&#34;https://xiaoming.lanzoui.com/iJandtz7gyb&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Windows Defender Blocker&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;解压密码：sordum&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a class=&#34;link&#34; href=&#34;https://wwz.lanzoul.com/i2qby28ae30d&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Windows Update Blocker&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;\&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a class=&#34;link&#34; href=&#34;https://wwz.lanzoul.com/iF68p28aegta&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Windows 11 轻松设置&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;\&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a class=&#34;link&#34; href=&#34;https://wwz.lanzoul.com/iFSYI22q3znc&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;ExecTI提权工具&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;9ywa&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a class=&#34;link&#34; href=&#34;https://wwz.lanzoul.com/ipR3O22q3zmb&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Everything&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;\&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a class=&#34;link&#34; href=&#34;https://wwz.lanzoul.com/iagCl22q3z5e&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;DragonKMS Activator&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;\&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a class=&#34;link&#34; href=&#34;https://wwz.lanzoul.com/iTLs122q3xuh&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;AIDA64&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;\&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a class=&#34;link&#34; href=&#34;https://wwz.lanzoul.com/i20JY287s15c&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;FastCopy&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;\&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a class=&#34;link&#34; href=&#34;https://wwz.lanzoul.com/iKaAW287sn9i&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;RaiDrive2020.11.30&lt;/a&gt; &lt;code&gt;Old version&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;faqd&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a class=&#34;link&#34; href=&#34;https://wwz.lanzoul.com/i9WcZ287t4qh&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;TotalCMD&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;h65b&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a class=&#34;link&#34; href=&#34;https://wwz.lanzoul.com/it4Fm28ae2re&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;qBittorrent&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;\&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a class=&#34;link&#34; href=&#34;https://wwz.lanzoul.com/iJow628ae9uj&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;AS SSD Benchmark&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;9uzk&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a class=&#34;link&#34; href=&#34;https://wwz.lanzoul.com/i0ApO28aenqj&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;CrystalDiskInfo&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;\&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a class=&#34;link&#34; href=&#34;https://wwz.lanzoul.com/i5Mpx28cf4qd&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Intel CAS(Cache Acceleration Software)&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;c276&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a class=&#34;link&#34; href=&#34;https://wwz.lanzoul.com/ink6t28jfl3e&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;BoardViewer点位图查看&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;\&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;系统安装工具&#34;&gt;系统安装工具&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Password&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a class=&#34;link&#34; href=&#34;https://wwz.lanzoul.com/iDcOn22q3z0j&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Dism++&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;\&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a class=&#34;link&#34; href=&#34;https://wwz.lanzoul.com/i3vsK22q3yud&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;DiskGeniusPRO&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;\&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a class=&#34;link&#34; href=&#34;https://wwz.lanzoul.com/i72bm24j105c&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Rufus&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;5k8t&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a class=&#34;link&#34; href=&#34;https://wwz.lanzoul.com/iMhPd287sjwh&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;EasyUEFI&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;4bva&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a class=&#34;link&#34; href=&#34;https://wwz.lanzoul.com/iRvSS28adxqd&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;BOOTICE&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;\&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a class=&#34;link&#34; href=&#34;https://wwz.lanzoul.com/iK90S28aeccj&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;RAMOS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;\&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a class=&#34;link&#34; href=&#34;https://wwz.lanzoul.com/iVtID28aedra&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;WinNTSetup&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;\&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a class=&#34;link&#34; href=&#34;https://wwz.lanzoul.com/iLriB28aefgb&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;MBR recovery&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1bz8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a class=&#34;link&#34; href=&#34;https://wwz.lanzoul.com/it3l328llona&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;BIOSBackupTool&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;64u3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a class=&#34;link&#34; href=&#34;https://wwz.lanzoul.com/iyr2Y28lluyh&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;MMTool&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;2up8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a class=&#34;link&#34; href=&#34;https://wwz.lanzoul.com/irZhR28lm3jg&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;EFI Shell 刷写BIOS&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;\&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;其他工具&#34;&gt;其他工具&lt;/h2&gt;
&lt;h3 id=&#34;量产工具&#34;&gt;量产工具&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Password&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a class=&#34;link&#34; href=&#34;https://wwz.lanzoul.com/izpys28jfb2d&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;ChipGenius4.21.0701&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;\&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a class=&#34;link&#34; href=&#34;https://wwz.lanzoul.com/i3A9j28jfdoh&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;TRANSCEND-SM32X-PV1.3.08-U1207&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;aph6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a class=&#34;link&#34; href=&#34;https://wwz.lanzoul.com/iGARJ28jfh4b&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;SM2258XT_Sandisk_BiCS4_T0910A0&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;43pf&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a class=&#34;link&#34; href=&#34;https://wwz.lanzoul.com/ibEEV29yq18b&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;SM2258XT(AD)_B16A_PKGV0608A_FWV0328A0 Beta&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;\&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a class=&#34;link&#34; href=&#34;https://wwz.lanzoul.com/i8P2i29yqrwb&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;SM2258XT东芝BiCS4颗粒（T0910A0固件）【8Die】&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;\&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a class=&#34;link&#34; href=&#34;https://wwz.lanzoul.com/iZKVY29yricd&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;TRANSCEND-SM32X-PV1.3.08-BY-USBDEV-U1207&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;\&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
</description>
        </item>
        <item>
        <title>一只硬件玩家的探索历程（硬件平台篇）</title>
        <link>https://tflasp.fun/2024/record-hw/</link>
        <pubDate>Thu, 22 Aug 2024 00:00:00 +0000</pubDate>
        
        <guid>https://tflasp.fun/2024/record-hw/</guid>
        <description>&lt;img src="https://tflasp.fun/2024/record-hw/3A2000C.jpg" alt="Featured image of post 一只硬件玩家的探索历程（硬件平台篇）" /&gt;&lt;h2 id=&#34;梦开始的地方&#34;&gt;梦开始的地方&lt;/h2&gt;
&lt;p&gt;最早的配置是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Intel Core i5-13400F&lt;/p&gt;
&lt;p&gt;铭瑄B760M WIFI&lt;/p&gt;
&lt;p&gt;华硕ATS RTX3060Ti&lt;/p&gt;
&lt;p&gt;威刚DDR4 3200 8*2&lt;/p&gt;
&lt;p&gt;鑫谷GN650W&lt;/p&gt;
&lt;p&gt;KIOXIA RC20 1T&lt;/p&gt;
&lt;p&gt;aigo P7000Z 2TB&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在当时的性价比还算可以吧，当时12600KF的价格可谓是居高不下，索性选择了当时最新的13代13400F（线程数更多，对生产力友好一些）&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://img.picui.cn/free/2024/08/22/66c6d97d6ac97.png&#34; &gt;
		&lt;img src=&#34;https://img.picui.cn/free/2024/08/22/66c6d97d6ac97.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;探索历程&#34;&gt;探索历程&lt;/h2&gt;
&lt;h3 id=&#34;主线-双路x79&#34;&gt;主线-双路X79&lt;/h3&gt;
&lt;p&gt;在家用平台用腻了过后，一天在淘宝上看到了一个非常逆天的主板:&lt;code&gt;Insuper M2220 X79&lt;/code&gt;.双路X79，仅需260包邮！带有10个SATA口，简直就是NAS党的福音！然后还能搭配超级便宜32元一根16GB的DDR3 RECC内存，实在是太香了，于是果断入手，开启了折腾之路。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 74; 
			flex-basis: 179px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/record-hw/M2220.jpg&#34; data-size=&#34;1280x1707&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/record-hw/M2220.jpg&#34;
			width=&#34;1280&#34;
			height=&#34;1707&#34;
			srcset=&#34;https://tflasp.fun/2024/record-hw/M2220_huef0483395ccb99ac18141e82185fd5ca_552637_480x0_resize_q75_box.jpg 480w, https://tflasp.fun/2024/record-hw/M2220_huef0483395ccb99ac18141e82185fd5ca_552637_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 74; 
			flex-basis: 179px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/record-hw/10SATA.jpg&#34; data-size=&#34;1280x1707&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/record-hw/10SATA.jpg&#34;
			width=&#34;1280&#34;
			height=&#34;1707&#34;
			srcset=&#34;https://tflasp.fun/2024/record-hw/10SATA_hudc5681ff371584c04d5e2ec75398cf73_591680_480x0_resize_q75_box.jpg 480w, https://tflasp.fun/2024/record-hw/10SATA_hudc5681ff371584c04d5e2ec75398cf73_591680_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 74; 
			flex-basis: 179px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/record-hw/D3-RECC.jpg&#34; data-size=&#34;1280x1707&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/record-hw/D3-RECC.jpg&#34;
			width=&#34;1280&#34;
			height=&#34;1707&#34;
			srcset=&#34;https://tflasp.fun/2024/record-hw/D3-RECC_hu47455dee509876c85ee863fe6b752ebb_513613_480x0_resize_q75_box.jpg 480w, https://tflasp.fun/2024/record-hw/D3-RECC_hu47455dee509876c85ee863fe6b752ebb_513613_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这个服务器板子是E-ATX规格，现在想起也是幸运，没有买到诸如&lt;code&gt;RH2288HV3&lt;/code&gt;那种定制板子，普通机箱装不了。另外，折腾这个板子也是坎坷：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1、开机慢：当然，本来就不是为家用而设计的，在启动时要加载BMC管理系统（带外管理），如果插入了直通卡，还要加载HBA卡的BIOS，总之，开机时间不会低于一分钟。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;2、10个SATA口识别不全：由于板子比较老（2013年的），所以查找官网资料也比较困难。这个板子有10个由C602芯片组引出来的SATA口，还有3个扩展出来的SAS接口（物理外形与SATA相同）。在排除了BIOS问题和硬件方面的问题后，最后发现是驱动问题。询问卖家要了驱动后，发现Windows10 22H2并不能打上驱动（安装ini），最后发现只有&lt;code&gt;Windows server&lt;/code&gt;和某些&lt;code&gt;Linux server&lt;/code&gt;的发行版才可以打上这个驱动，而Windows server的安全策略过于严格，导致并不适合日常使用。所以只能暂时放弃使用10个SATA的想法了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;3、不支持由NVME硬盘启动。这个其实比较好解决，提取BIOS，然后使用MMTool在BIOS内添加NVME驱动后，刷回BIOS内即可解决这个问题。（详见教程）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;4、功耗问题：这个是怕X79平台的硬伤，没有办法解决（只有&lt;code&gt;换平台&lt;/code&gt;）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;主线-单路x79&#34;&gt;主线-单路X79&lt;/h3&gt;
&lt;p&gt;由于双路X79平台功耗实在是太高了，电源650W带不太动，于是换到了单路X79平台（130包邮精粤X79M-PRO V2）&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 73; 
			flex-basis: 176px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/record-hw/S-X79.jpg&#34; data-size=&#34;440x597&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/record-hw/S-X79.jpg&#34;
			width=&#34;440&#34;
			height=&#34;597&#34;
			srcset=&#34;https://tflasp.fun/2024/record-hw/S-X79_hubc3aa4d7b8e338c10c987baeac028ec9_103847_480x0_resize_q75_box.jpg 480w, https://tflasp.fun/2024/record-hw/S-X79_hubc3aa4d7b8e338c10c987baeac028ec9_103847_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;更换平台主要是为日常使用考虑的，由于是寨板，所以并没有BMC带外管理，启动速度快得多。但是也催生了一个问题，主板MOS管温度非常高，即使带一个TDP为95W的&lt;code&gt;E5-2650V2&lt;/code&gt;，mos管温度能达到110℃，经常因为供电温度原因降频死机，这让我顿悟：洋垃圾平台有他便宜的道理，还是家用平台更加稳定可靠。&lt;/p&gt;
&lt;h3 id=&#34;侧线-fm2fm2&#34;&gt;侧线-FM2、FM2+&lt;/h3&gt;
&lt;p&gt;当然，只折腾主力机是一件比较痛苦的事情，所以就诞生了所谓&lt;code&gt;二奶机&lt;/code&gt;的说法。我的第一台二奶机就是微星的&lt;code&gt;A58&lt;/code&gt; + &lt;code&gt;AMD A4-6400K&lt;/code&gt;。也是第一次体验到MSI图形BIOS的统治力（就是使用逻辑不大好）。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 74; 
			flex-basis: 179px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/record-hw/FM2-1.jpg&#34; data-size=&#34;1280x1707&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/record-hw/FM2-1.jpg&#34;
			width=&#34;1280&#34;
			height=&#34;1707&#34;
			srcset=&#34;https://tflasp.fun/2024/record-hw/FM2-1_hua8fbc4613d1f7f09d6a2eec66e00330a_453925_480x0_resize_q75_box.jpg 480w, https://tflasp.fun/2024/record-hw/FM2-1_hua8fbc4613d1f7f09d6a2eec66e00330a_453925_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;不得不说，老AMD的核显确实给力，Windows10日常办公非常流畅，作为一个办公机绰绰有余。但是，处理器部分就极为有限，虽然频率非常高，但是并不顶用。&lt;/p&gt;
&lt;h3 id=&#34;服务器线-b85&#34;&gt;服务器线-B85&lt;/h3&gt;
&lt;p&gt;在认识了一位同道中人后，他把之前用的平台借给了我。就是这块B85和&lt;code&gt;Intel Core i5-4460&lt;/code&gt;以及DDR3 1600 8*2和其他配件。本来打算用这套平台作为服务器的，但是他的线程数实在是太少了，只有4线程，并且功耗也不低，待机状况下有65W左右功耗，最终也只是让它跑&lt;code&gt;Windows server 2019&lt;/code&gt;来进行一些磁盘类的操作（&lt;code&gt;MHDD&lt;/code&gt;扫盘、磁盘清零的操作）。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 74; 
			flex-basis: 179px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/record-hw/4460.jpg&#34; data-size=&#34;1280x1707&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/record-hw/4460.jpg&#34;
			width=&#34;1280&#34;
			height=&#34;1707&#34;
			srcset=&#34;https://tflasp.fun/2024/record-hw/4460_hu8204281a72bdb0958c4a4b1c5f9bc599_218358_480x0_resize_q75_box.jpg 480w, https://tflasp.fun/2024/record-hw/4460_hu8204281a72bdb0958c4a4b1c5f9bc599_218358_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 74; 
			flex-basis: 179px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/record-hw/B85-1.jpg&#34; data-size=&#34;1280x1707&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/record-hw/B85-1.jpg&#34;
			width=&#34;1280&#34;
			height=&#34;1707&#34;
			srcset=&#34;https://tflasp.fun/2024/record-hw/B85-1_huf8b373769035800d9d9e96ebd843628c_504814_480x0_resize_q75_box.jpg 480w, https://tflasp.fun/2024/record-hw/B85-1_huf8b373769035800d9d9e96ebd843628c_504814_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这块主板同样有值得折腾的点：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1、同样不支持由NVME硬盘启动，解决方法可以借鉴上文折腾X79的操作。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;2、拥有6个原生SATA口（属于是把芯片组的所有通道用完了）：可以拿来当NAS之类的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;3、拥有两个Pciex1，可以拿来扩展一个2.5GB网卡和一个NVMe硬盘，配合2.5G交换机使用，实现内网2.5G化&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;但是也就仅限与这些了，主要还是被CPU的性能与功耗所限制。&lt;/p&gt;
&lt;h3 id=&#34;侧线-龙芯3a2000c&#34;&gt;侧线-龙芯3A2000C&lt;/h3&gt;
&lt;p&gt;在2024年初，在咸鱼上偶然看到一个主板，龙芯3A2000C itx主板，自带4个SATA口，36元包邮&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;作为垃圾佬的直觉，果断入手
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;但是由于这款主板挑内存，我手上6根DDR3普条都没有办法使它开机，于是也就没有了后续&lt;/p&gt;
&lt;p&gt;当然，随着有人把这块主板做成视频宣传后，主板在2个月后就断货了。半年后，我以66元的价格卖出去了（小赚一笔嘿嘿）&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 75; 
			flex-basis: 180px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/record-hw/3A2000C.jpg&#34; data-size=&#34;1080x1440&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/record-hw/3A2000C.jpg&#34;
			width=&#34;1080&#34;
			height=&#34;1440&#34;
			srcset=&#34;https://tflasp.fun/2024/record-hw/3A2000C_huaa52919b9611763bc4b860db58edaa8a_513863_480x0_resize_q75_box.jpg 480w, https://tflasp.fun/2024/record-hw/3A2000C_huaa52919b9611763bc4b860db58edaa8a_513863_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;侧线-p5pl2&#34;&gt;侧线-P5PL2&lt;/h3&gt;
&lt;p&gt;偶然的一次机会，回老家翻出了一台老电脑。大概是2007年的时候装的吧。还是用的XP系统。拆开一看，真是老古董。&lt;code&gt;奔腾4 631&lt;/code&gt;+华硕&lt;code&gt;P5PL2-E&lt;/code&gt;主板，用料可以用豪华来形容。可是这个接近20年前的产品终究还是无法抵挡时间的摧残，虽然能开机，但是清灰后就不亮了（疑似打破了灰电平衡）。不得不说，奔腾的发热量真的是巨大，被动式散热根本压不住（甚至被烫了一下）。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 74; 
			flex-basis: 179px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/record-hw/775.jpg&#34; data-size=&#34;1280x1707&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/record-hw/775.jpg&#34;
			width=&#34;1280&#34;
			height=&#34;1707&#34;
			srcset=&#34;https://tflasp.fun/2024/record-hw/775_hu25d19a745130813e627c871e9e61c399_548320_480x0_resize_q75_box.jpg 480w, https://tflasp.fun/2024/record-hw/775_hu25d19a745130813e627c871e9e61c399_548320_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 74; 
			flex-basis: 179px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/record-hw/775-1.jpg&#34; data-size=&#34;1280x1707&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/record-hw/775-1.jpg&#34;
			width=&#34;1280&#34;
			height=&#34;1707&#34;
			srcset=&#34;https://tflasp.fun/2024/record-hw/775-1_hu449bbe1f60d739aa227c528264cd837c_485871_480x0_resize_q75_box.jpg 480w, https://tflasp.fun/2024/record-hw/775-1_hu449bbe1f60d739aa227c528264cd837c_485871_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 216; 
			flex-basis: 519px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/record-hw/P4.png&#34; data-size=&#34;1139x526&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/record-hw/P4.png&#34;
			width=&#34;1139&#34;
			height=&#34;526&#34;
			srcset=&#34;https://tflasp.fun/2024/record-hw/P4_hua563052502d206c03f035031695f5dbc_70849_480x0_resize_box_3.png 480w, https://tflasp.fun/2024/record-hw/P4_hua563052502d206c03f035031695f5dbc_70849_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;主线-am4之光&#34;&gt;主线-AM4之光&lt;/h3&gt;
&lt;p&gt;众所周知，AMD YES!，在经历了最近的Intel的暴毙后，性价比极高的12600KF（低价为880）便不敢入手了。&lt;/p&gt;
&lt;p&gt;于是，目光转向了神U：AMD R5 5600（B2步进）。拥有大L3（32MB），打网游非常爽，属于千年性价比组合了。&lt;/p&gt;
&lt;p&gt;5600到手后，直接超频到4.75GHz 1.2V使用，体验非常好！&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 99; 
			flex-basis: 239px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/record-hw/AM4.jpg&#34; data-size=&#34;1279x1284&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/record-hw/AM4.jpg&#34;
			width=&#34;1279&#34;
			height=&#34;1284&#34;
			srcset=&#34;https://tflasp.fun/2024/record-hw/AM4_hu2daa236dd722a1d9fcdfb82cb378311e_303829_480x0_resize_q75_box.jpg 480w, https://tflasp.fun/2024/record-hw/AM4_hu2daa236dd722a1d9fcdfb82cb378311e_303829_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;配合上现在及其便宜的AM4板子，属于是颜值与性能同在了吧&lt;/p&gt;
&lt;p&gt;所以我现在的主力机配置为：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;AMD R5 5600 B2&lt;/p&gt;
&lt;p&gt;技嘉B550M AORUS ELITE&lt;/p&gt;
&lt;p&gt;光威DDR4 3200 16G&lt;/p&gt;
&lt;p&gt;利民TR TG850W&lt;/p&gt;
&lt;p&gt;技嘉GTX 1070Ti 8G Gaming&lt;/p&gt;
&lt;p&gt;利民AX120-SE风冷&lt;/p&gt;
&lt;p&gt;致态Tiplus5000 1TB&lt;/p&gt;
&lt;p&gt;西数SN730 256GB OEM&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;不推荐抄作业，特别是显卡。这是我通过自己的需求搭出来的配置，很显然这里显卡方面弱了。&lt;/p&gt;
&lt;h3 id=&#34;侧线-modt平台&#34;&gt;侧线-MoDT平台&lt;/h3&gt;
&lt;p&gt;由于MoDT平台极高的性价比，以及Q1HY远超桌面平台的性能，于是就入手了TOPC（天邦）的Q1HY DDR4版本的板子。上手测试，原装的“均热板”太弱鸡了，不亚于AM4时代AMD的积热顶盖，导致一烤鸡就破百，撞温度墙，降频。于是就更换了尔英科技的itx均热板，烤鸡有缓解，但是手上也没有合适的散热器，最高规格的也都是上次压洋垃圾的6热管双塔风冷了。由于这个平台确实太吵了，于是也就只是过了下手玩了会就出了。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 74; 
			flex-basis: 179px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/record-hw/MoDT-1.jpg&#34; data-size=&#34;1280x1707&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/record-hw/MoDT-1.jpg&#34;
			width=&#34;1280&#34;
			height=&#34;1707&#34;
			srcset=&#34;https://tflasp.fun/2024/record-hw/MoDT-1_huaa83b96181c63b501c6aba08159c3aee_254657_480x0_resize_q75_box.jpg 480w, https://tflasp.fun/2024/record-hw/MoDT-1_huaa83b96181c63b501c6aba08159c3aee_254657_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 74; 
			flex-basis: 179px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/record-hw/MoDT-2.jpg&#34; data-size=&#34;1280x1707&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/record-hw/MoDT-2.jpg&#34;
			width=&#34;1280&#34;
			height=&#34;1707&#34;
			srcset=&#34;https://tflasp.fun/2024/record-hw/MoDT-2_hu60b987e66707ef554c896cad1525cad4_347455_480x0_resize_q75_box.jpg 480w, https://tflasp.fun/2024/record-hw/MoDT-2_hu60b987e66707ef554c896cad1525cad4_347455_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;不得不说，这个板子其实挺有搭建全闪NAS的潜力的。拥有3个M.2口，其中有两个PCIe4.0x（一个由PCH引出）4，一个PCIe3.0x4。其搭载的核显也可以加速视频解码使用。&lt;/p&gt;
&lt;h3 id=&#34;服务器线-x99&#34;&gt;服务器线-X99&lt;/h3&gt;
&lt;p&gt;在体验了X79平台以后，似乎对洋垃圾平台（E3、E5）有了心里阴影，代表着高功耗与低主频。但是，志强也有低功耗的版本（后缀带L），比如这颗&lt;code&gt;E5-2630LV3&lt;/code&gt;，TDP仅有55w（比i5-4460 TDP 84w要低得多）&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 196; 
			flex-basis: 472px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/record-hw/2630LV3.png&#34; data-size=&#34;1242x631&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/record-hw/2630LV3.png&#34;
			width=&#34;1242&#34;
			height=&#34;631&#34;
			srcset=&#34;https://tflasp.fun/2024/record-hw/2630LV3_hu1b035a9763c1253551641c9115f8e88b_83643_480x0_resize_box_3.png 480w, https://tflasp.fun/2024/record-hw/2630LV3_hu1b035a9763c1253551641c9115f8e88b_83643_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;而且还Xeon的绝对优势：核心多。超适合开PVE，多开系统。于是就入手了这款HSGM X99 PF7。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 133; 
			flex-basis: 320px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/record-hw/PF7.jpg&#34; data-size=&#34;4032x3024&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/record-hw/PF7.jpg&#34;
			width=&#34;4032&#34;
			height=&#34;3024&#34;
			srcset=&#34;https://tflasp.fun/2024/record-hw/PF7_hua7c393c484a68cac710a0bbb783b8acb_8120295_480x0_resize_q75_box.jpg 480w, https://tflasp.fun/2024/record-hw/PF7_hua7c393c484a68cac710a0bbb783b8acb_8120295_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在实际上手后才知道其有两个SATA控制器（一个SATA，一个eSATA），在加上一张阵列卡即可将不同硬直通到三个虚拟机里，爽！&lt;/p&gt;
&lt;p&gt;并且这个板子还有一个特性，支持DDR3与DDR4双平台，也意味着其有极高的可玩性（D3 D4不能同时用，因为用的是不同的BIOS）&lt;/p&gt;
&lt;p&gt;实测该平台待机功耗为60w，能耗比显然比B85要高。&lt;/p&gt;
&lt;h3 id=&#34;服务器线-dell-wyse瘦客户机&#34;&gt;服务器线-DELL WYSE瘦客户机&lt;/h3&gt;
&lt;p&gt;由于搭建网站，最初的想法是一个超低功耗的服务器来跑nginx和内网穿透，于是就入手了这款DELL-WYSE-3290瘦客户机。整体占地不大，功耗也可以控制在3-8W内（无感的功耗），同时被动散热也使它非常静音。虽然其搭载的CPU N2807非常弱，但是跑nginx还是非常好的。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 74; 
			flex-basis: 179px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/record-hw/wyse.jpg&#34; data-size=&#34;1280x1707&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/record-hw/wyse.jpg&#34;
			width=&#34;1280&#34;
			height=&#34;1707&#34;
			srcset=&#34;https://tflasp.fun/2024/record-hw/wyse_hu01a261ad16a5dcd88c259944c488a75c_251278_480x0_resize_q75_box.jpg 480w, https://tflasp.fun/2024/record-hw/wyse_hu01a261ad16a5dcd88c259944c488a75c_251278_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;设计非常紧凑，麻雀虽小五脏俱全，DELL还是挺有水平的一家OEM公司（就是贵）&lt;/p&gt;
&lt;p&gt;现在正在拿来跑nginx，已经两三周没有关机了，除非供电源的问题，一般还是非常稳定的。&lt;/p&gt;
&lt;h2 id=&#34;总结&#34;&gt;总结&lt;/h2&gt;
&lt;p&gt;当然这篇文章永远不会到此结束，未来更多好玩的硬件还多着呢，这里只是想总结DIY精神：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;要么就是在折腾，要么就是在折腾的路上
垃圾佬买硬件几乎不是拿来常用的，而是拿来折腾的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;问折腾硬件有什么意义？&lt;/p&gt;
&lt;p&gt;就如人类为什么要举办奥运会，为什么要攀登珠穆朗玛峰一样，这个问题本身就没有意义，生命在于探索和不停地折腾！&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>一只硬件玩家的探索历程（软件系统篇）</title>
        <link>https://tflasp.fun/2024/record-sw/</link>
        <pubDate>Thu, 22 Aug 2024 00:00:00 +0000</pubDate>
        
        <guid>https://tflasp.fun/2024/record-sw/</guid>
        <description>&lt;img src="https://tflasp.fun/2024/record-sw/sys-10.jpg" alt="Featured image of post 一只硬件玩家的探索历程（软件系统篇）" /&gt;&lt;h2 id=&#34;system&#34;&gt;System&lt;/h2&gt;
&lt;h3 id=&#34;windows&#34;&gt;Windows&lt;/h3&gt;
&lt;p&gt;第一台笔记本用的是&lt;code&gt;Windows LTSC 2019（17763.6189）&lt;/code&gt;，非常精简，砍掉了Microsoft store以及所有UWP应用。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 106; 
			flex-basis: 256px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/record-sw/LTSC2019.jpg&#34; data-size=&#34;380x356&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/record-sw/LTSC2019.jpg&#34;
			width=&#34;380&#34;
			height=&#34;356&#34;
			srcset=&#34;https://tflasp.fun/2024/record-sw/LTSC2019_hua3bdb90004ddb224a5a8a41c58474616_24516_480x0_resize_q75_box.jpg 480w, https://tflasp.fun/2024/record-sw/LTSC2019_hua3bdb90004ddb224a5a8a41c58474616_24516_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当时主Channel版本是&lt;code&gt;21H1（19042.1）&lt;/code&gt;，本想是通过Microsoft官方的MCT Update升级系统的（保留文件与设置），但由于LTSC与普通平台不在一个渠道里，所以自然也不在MCT所支持的升级版本里。&lt;/p&gt;
&lt;p&gt;于是顺藤摸瓜搞清楚了MacBook双系统的解决办法，以及BootCamp驱动。详见我写的教程：&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/Dd_w606/article/details/120640475&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;CSDN文章&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2021年6月，Windows 11首次泄露，同时我也搞了一份来体验&lt;code&gt;（Build 22000.1）&lt;/code&gt;,这体验。。。把我最喜欢的磁贴给砍掉了，整体磨成圆角，越来越“果化”了。同时，Windows11对系统硬件增加了对TPM2.0的要求，这确实筛掉了很多老电脑，不过也可以通过修改注册表或者替换动态链接库（DLL文件）来实现安装Windows11，在此就不做教程了。&lt;/p&gt;
&lt;p&gt;2021年6月24日，微软发布&lt;code&gt;Windows 11（22000.168）&lt;/code&gt;，至此我电脑用上了3系统（MacOS+Windows10 21H2+Windows11）&lt;/p&gt;
&lt;p&gt;引导结构如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;├─MacOS Bootloader
└─Windows Boot Manager
    ├─Windows 10
    └─Windows 11
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在日常使用之外，我还喜欢尝试一些Insider Preview版本的系统，比如被号称为&lt;code&gt;Windows 9&lt;/code&gt;的&lt;code&gt;Windows Technical Preview Build 9834&lt;/code&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Links&lt;/th&gt;
&lt;th&gt;Password&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a class=&#34;link&#34; href=&#34;http://pan.baidu.com/s/1c60rW6&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Windows Technical Preview Build 9834&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;提取码：k2qe&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Edition / SKU Name&lt;/th&gt;
&lt;th&gt;Key&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Professional&lt;/td&gt;
&lt;td&gt;XHQ8N-C3MCJ-RQXB6-WCHYG-C9WKB&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Core&lt;/td&gt;
&lt;td&gt;334NH-RXG76-64THK-C7CKG-D3VPT&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;然后就是不停的用最新版，跟着&lt;code&gt;Windows10 19042&lt;/code&gt;一直到现在的&lt;code&gt;19045&lt;/code&gt;，&lt;code&gt;Windows11 22000&lt;/code&gt;到&lt;code&gt;26100.1586&lt;/code&gt;,这三年算是随Windows一起迭代了吧哈哈，到后来随着事情越来越多，Windows update似乎确实有点烦人，索性组策略直接禁用了Windows update。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 252; 
			flex-basis: 605px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/record-sw/240824.jpg&#34; data-size=&#34;565x224&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/record-sw/240824.jpg&#34;
			width=&#34;565&#34;
			height=&#34;224&#34;
			srcset=&#34;https://tflasp.fun/2024/record-sw/240824_huf68f1d1913b165da65d30e70d0c00519_23924_480x0_resize_q75_box.jpg 480w, https://tflasp.fun/2024/record-sw/240824_huf68f1d1913b165da65d30e70d0c00519_23924_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;截至2024年8月24日的Windows各Channel最新版本&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;截至2024年8月24日的Windows各Channel最新版本&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;linux&#34;&gt;Linux&lt;/h3&gt;
&lt;p&gt;除了Windows，当然少不了Linux。&lt;/p&gt;
&lt;p&gt;在尝试了Linux minit 、CentOS、Ubuntu后，最终还是选择了Ubuntu更适合我的使用逻辑，目前正作为服务器使用（&lt;code&gt;Ubuntu server 2404 LTS&lt;/code&gt;）。&lt;/p&gt;
&lt;p&gt;由于Linux极高的可自定义性，目前在用&lt;code&gt;Proxmox VE&lt;/code&gt;作为服务器Host系统，然后在其下安装虚拟机来最大化利用系统硬件资源。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 198; 
			flex-basis: 476px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/record-sw/pve.jpg&#34; data-size=&#34;1901x957&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/record-sw/pve.jpg&#34;
			width=&#34;1901&#34;
			height=&#34;957&#34;
			srcset=&#34;https://tflasp.fun/2024/record-sw/pve_huae367620b5e57a8a7e1d11fcc1de64df_222125_480x0_resize_q75_box.jpg 480w, https://tflasp.fun/2024/record-sw/pve_huae367620b5e57a8a7e1d11fcc1de64df_222125_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;software&#34;&gt;Software&lt;/h2&gt;
&lt;p&gt;WSL、WSA、VMware、Hyper-V、FastCopy、Dism++、DiskGenius、FlashID等等实用工具，详见&lt;a class=&#34;link&#34; href=&#34;https://tflasp.fun/2024/links/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;这里&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>【归档】Proxmox VE更新CPU微码</title>
        <link>https://tflasp.fun/2024/microcode/</link>
        <pubDate>Wed, 21 Aug 2024 00:00:00 +0000</pubDate>
        
        <guid>https://tflasp.fun/2024/microcode/</guid>
        <description>&lt;h2 id=&#34;问题重现&#34;&gt;问题重现&lt;/h2&gt;
&lt;p&gt;PVE 启动时，看到屏幕上有提示要求更新 microcode。&lt;/p&gt;
&lt;h2 id=&#34;添加仓库&#34;&gt;添加仓库&lt;/h2&gt;
&lt;p&gt;需要添加 unstable repo：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &amp;quot;deb http://deb.debian.org/debian/ unstable non-free-firmware&amp;quot; &amp;gt; /etc/apt/sources.list.d/debian-unstable.list
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;执行更新：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;apt update &amp;amp;&amp;amp; apt list --upgradable
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;安装微码，intel 选择：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;apt -y install intel-microcode
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;amd 选择：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;apt -y install amd64-microcode
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;更新完之后重启，发现之前报告要求更新 microcode 的信息消失了，搞定。&lt;/p&gt;
&lt;p&gt;记得把 unstable 仓库删除，避免不小心更新到这个仓库中的其他软件。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rm /etc/apt/sources.list.d/debian-unstable.list
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;引发问题&#34;&gt;引发问题&lt;/h2&gt;
&lt;p&gt;安装上面的方式安装微码之后，即使注释或者删除 debian-unstable.list 文件，在 apt update 时也会出现以下提示：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ apt update
Hit:1 https://mirrors.ustc.edu.cn/debian bookworm InRelease
Hit:2 https://mirrors.tuna.tsinghua.edu.cn/proxmox/debian bookworm InRelease
Hit:3 https://mirrors.ustc.edu.cn/debian bookworm-updates InRelease
Reading package lists... Done
Building dependency tree... Done
Reading state information... Done
All packages are up to date.
N: Repository &#39;Debian bookworm&#39; changed its &#39;firmware component&#39; value from &#39;non-free&#39; to &#39;non-free-firmware&#39;
N: More information about this can be found online in the Release notes at: https://www.debian.org/releases/bookworm/amd64/release-notes/ch-information.html#non-free-split
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果不想继续看到这个提示，可以修改文件：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;vi /etc/apt/apt.conf.d/no-bookworm-firmware.conf
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输入内容：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-properties&#34;&gt;APT::Get::Update::SourceListWarnings::NonFreeFirmware &amp;quot;false&amp;quot;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;再次执行 apt update 命令就不会再出现这个提示了：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ apt update
Hit:1 https://mirrors.ustc.edu.cn/debian bookworm InRelease
Hit:2 https://mirrors.ustc.edu.cn/debian bookworm-updates InRelease
Hit:3 https://mirrors.tuna.tsinghua.edu.cn/proxmox/debian bookworm InRelease
Reading package lists... Done
Building dependency tree... Done
Reading state information... Done
All packages are up to date.
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;参考资料&#34;&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://cyrusyip.org/en/post/2023/01/31/install-microcode-on-proxmox/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;How to Install the Latest Microcode on Proxmox VE (Debian stable)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>【归档】PVE安装RTL8125驱动</title>
        <link>https://tflasp.fun/2024/rtl8125-driver/</link>
        <pubDate>Wed, 21 Aug 2024 00:00:00 +0000</pubDate>
        
        <guid>https://tflasp.fun/2024/rtl8125-driver/</guid>
        <description>&lt;h2 id=&#34;问题重现&#34;&gt;问题重现&lt;/h2&gt;
&lt;p&gt;发现更新驱动之后，普通模式下可以正常工作，但一旦开启直通，这个驱动就会无法工作。&lt;/p&gt;
&lt;p&gt;而因为 RTL8139 被加入黑名单，导致没有驱动可用，然后网卡就无法使用。&lt;/p&gt;
&lt;p&gt;因为这个网卡是用于管理网络的，所以 PVE 也跟着失联了&amp;hellip;&amp;hellip;&lt;/p&gt;
&lt;p&gt;因此，放弃更新这个驱动。后续移除了所有的 2.5G 网卡，统一使用 cx3 pro 40g （hp544+）或者 cx4 25g 网卡。&lt;/p&gt;
&lt;h2 id=&#34;准备工作&#34;&gt;准备工作&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;apt install -y dkms
apt install -y pve-headers-$(uname -r)
apt install --fix-broken
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;下载驱动&#34;&gt;下载驱动&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/awesometic/realtek-r8125-dkms/releases&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/awesometic/realtek-r8125-dkms/releases&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir ~/temp
cd ~/temp
wget https://github.com/awesometic/realtek-r8125-dkms/releases/download/9.010.01-2/realtek-r8125-dkms_9.010.01-2_amd64.deb
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;通过安装包安装驱动&#34;&gt;&lt;del&gt;通过安装包安装驱动&lt;/del&gt;&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dpkg -i realtek-r8125-dkms_9.010.01-2_amd64.deb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出为：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dpkg -i realtek-r8125-dkms_9.010.01-2_amd64.deb
Selecting previously unselected package realtek-r8125-dkms.
(Reading database ... 86910 files and directories currently installed.)
Preparing to unpack realtek-r8125-dkms_9.010.01-2_amd64.deb ...
Unpacking realtek-r8125-dkms (9.010.01-2) ...
Setting up realtek-r8125-dkms (9.010.01-2) ...
locale: Cannot set LC_ALL to default locale: No such file or directory
Loading new realtek-r8125-9.010.01 DKMS files...
Deprecated feature: REMAKE_INITRD (/usr/src/realtek-r8125-9.010.01/dkms.conf)
Building for 6.2.16-4-pve
Building for architecture amd64
Building initial module for 6.2.16-4-pve
Deprecated feature: REMAKE_INITRD (/var/lib/dkms/realtek-r8125/9.010.01/source/dkms.conf)
Done.
Deprecated feature: REMAKE_INITRD (/var/lib/dkms/realtek-r8125/9.010.01/source/dkms.conf)
Deprecated feature: REMAKE_INITRD (/var/lib/dkms/realtek-r8125/9.010.01/source/dkms.conf)

r8125.ko:
Running module version sanity check.
 - Original module
   - No original module exists within this kernel
 - Installation
   - Installing to /lib/modules/6.2.16-4-pve/updates/dkms/
depmod...
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这个版本是 9.010。&lt;/p&gt;
&lt;h2 id=&#34;通过源码安装驱动&#34;&gt;通过源码安装驱动&lt;/h2&gt;
&lt;p&gt;发现代码里面有更新到 9.011，只是没有打包发布为 deb 格式。但是可以从源码开始安装。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/awesometic/realtek-r8125-dkms.git 
cd realtek-r8125-dkms
./dkms-install.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出为：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./dkms-install.sh 
About to run dkms install steps...
Deprecated feature: REMAKE_INITRD (/usr/src/r8125-9.011.01/dkms.conf)
Creating symlink /var/lib/dkms/r8125/9.011.01/source -&amp;gt; /usr/src/r8125-9.011.01
Sign command: /lib/modules/6.2.16-4-pve/build/scripts/sign-file
Signing key: /var/lib/dkms/mok.key
Public certificate (MOK): /var/lib/dkms/mok.pub
Deprecated feature: REMAKE_INITRD (/var/lib/dkms/r8125/9.011.01/source/dkms.conf)

Building module:
Cleaning build area...
&#39;make&#39; -j16 KVER=6.2.16-4-pve BSRC=/lib/modules/6.2.16-4-pve modules......
Signing module /var/lib/dkms/r8125/9.011.01/build/src/r8125.ko
Cleaning build area...
Deprecated feature: REMAKE_INITRD (/var/lib/dkms/r8125/9.011.01/source/dkms.conf)

r8125.ko:
Running module version sanity check.
 - Original module
 - Installation
   - Installing to /lib/modules/6.2.16-4-pve/updates/dkms/
depmod...
Finished running dkms install steps.
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;更换驱动&#34;&gt;更换驱动&lt;/h2&gt;
&lt;p&gt;屏蔽 R8169 驱动：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo sh -c &#39;echo blacklist r8169 &amp;gt;&amp;gt; /etc/modprobe.d/blacklist_r8169.conf&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;重启机器，检验：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;lsmod | grep r81  
r8125                 262144  0
r8169                 114688  0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;对比没有更新驱动的输出：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;lsmod | grep r81  
r8169                 114688  0
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;检验&#34;&gt;检验&lt;/h2&gt;
&lt;p&gt;更新之前，客户端和服务器端都使用默认的 r8169 驱动，iperf3 测试速度为 2.35-2.36G。&lt;/p&gt;
&lt;p&gt;更新客户端驱动为  r8125 驱动, iperf3 测试速度为 2.35-2.36 G，几乎没有变化。&lt;/p&gt;
&lt;p&gt;继续更新服务器端驱动为  r8125 驱动, iperf3 测试速度为 2.35/2.36G，几乎没有变化。&lt;/p&gt;
&lt;p&gt;总结：&lt;strong&gt;更新驱动未能带来速度方面的直接收益&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;参考资料&#34;&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://zhuanlan.zhihu.com/p/577161166&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://zhuanlan.zhihu.com/p/577161166&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.right.com.cn/forum/forum.php?mod=viewthread&amp;amp;tid=7446026&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.right.com.cn/forum/forum.php?mod=viewthread&amp;tid=7446026&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/awesometic/realtek-r8125-dkms&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/awesometic/realtek-r8125-dkms&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        </item>
        <item>
        <title>【归档】PVE安装配置timeshift</title>
        <link>https://tflasp.fun/2024/timeshift/</link>
        <pubDate>Wed, 21 Aug 2024 00:00:00 +0000</pubDate>
        
        <guid>https://tflasp.fun/2024/timeshift/</guid>
        <description>&lt;p&gt;前面在安装 PVE 时，选择了留出 50G 大小的空间给 timeshift 使用。&lt;/p&gt;
&lt;h2 id=&#34;为-timeshift-准备分区&#34;&gt;为 timeshift 准备分区&lt;/h2&gt;
&lt;h3 id=&#34;查看当前磁盘分区情况&#34;&gt;查看当前磁盘分区情况&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;fdisk -l
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;查看当前硬盘情况：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Disk /dev/nvme0n1: 465.76 GiB, 500107862016 bytes, 976773168 sectors
Disk model: WDC WDS500G1B0C-00S6U0                  
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disklabel type: gpt
Disk identifier: 000372CE-8B4D-4B12-974B-99C231DB3D67

Device           Start       End   Sectors  Size Type
/dev/nvme0n1p1      34      2047      2014 1007K BIOS boot
/dev/nvme0n1p2    2048   2099199   2097152    1G EFI System
/dev/nvme0n1p3 2099200 838860800 836761601  399G Linux LVM


Disk /dev/mapper/pve-swap: 8 GiB, 8589934592 bytes, 16777216 sectors
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes


Disk /dev/mapper/pve-root: 96 GiB, 103079215104 bytes, 201326592 sectors
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这是一个大小为 480G 的 nvme SSD 硬盘，实际可用空间为 465G。在安装 PVE 时我将 hdsize 设置为 400G, 因此 PVE 使用的空间只有400G。从上面输出可以看到：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;/dev/nvme0n1p1      34      2047      2014 1007K BIOS boot
/dev/nvme0n1p2    2048   2099199   2097152    1G EFI System
/dev/nvme0n1p3 2099200 838860800 836761601  399G Linux LVM
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;nvme0n1p1 是 BIOS， nvme0n1p2 是 EFI 分区，PVE 使用的是 nvme0n1p3，399G。&lt;/p&gt;
&lt;p&gt;另外可以看到：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Disk /dev/mapper/pve-swap: 8 GiB, 8589934592 bytes, 16777216 sectors
Disk /dev/mapper/pve-root: 96 GiB, 103079215104 bytes, 201326592 sectors
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;swap 使用了 8G， pve root 使用了 96 G。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;lsblk -f
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以看到 nvme0n1p3 是一个 LVM2，400G 的总空间中，内部被分为 pve-swap / pve-root / pve-data_tmeta&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
NAME               FSTYPE      FSVER    LABEL UUID                                   FSAVAIL FSUSE% MOUNTPOINTS
nvme0n1                                                                                             
|-nvme0n1p1                                                                                         
|-nvme0n1p2        vfat        FAT32          26F2-091E                              1021.6M     0% /boot/efi
`-nvme0n1p3        LVM2_member LVM2 001       foXyBZ-IPQT-wOCF-DWSN-u88a-sBVD-LaZ9zn                
  |-pve-swap       swap        1              c5d97cb5-4d18-4f43-a36f-fb67eb8dcc84                  [SWAP]
  |-pve-root       ext4        1.0            a0a46add-dda5-42b4-a978-97d363eeddd0     85.2G     4% /
  |-pve-data_tmeta                                                                                  
  | `-pve-data                                                                                      
  `-pve-data_tdata                                                                                  
    `-pve-data   
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;剩余的大约 60G 的空间在这里没有显示。&lt;/p&gt;
&lt;h3 id=&#34;添加-timeshift-分区&#34;&gt;添加 timeshift 分区&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;fdisk /dev/nvme0n1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出为：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Welcome to fdisk (util-linux 2.38.1).
Changes will remain in memory only, until you decide to write them.
Be careful before using the write command.

This disk is currently in use - repartitioning is probably a bad idea.
It&#39;s recommended to umount all file systems, and swapoff all swap
partitions on this disk.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在警告说磁盘使用中，重新分区不是一个好注意。不过我们是操作剩余空间，比较安全。&lt;/p&gt;
&lt;p&gt;输入 m 获得帮助：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Command (m for help): m

Help:

  GPT
   M   enter protective/hybrid MBR

  Generic
   d   delete a partition
   F   list free unpartitioned space
   l   list known partition types
   n   add a new partition
   p   print the partition table
   t   change a partition type
   v   verify the partition table
   i   print information about a partition

  Misc
   m   print this menu
   x   extra functionality (experts only)

  Script
   I   load disk layout from sfdisk script file
   O   dump disk layout to sfdisk script file

  Save &amp;amp; Exit
   w   write table to disk and exit
   q   quit without saving changes

  Create a new label
   g   create a new empty GPT partition table
   G   create a new empty SGI (IRIX) partition table
   o   create a new empty MBR (DOS) partition table
   s   create a new empty Sun partition table
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输入 F 列出未分区的剩余空间：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Command (m for help): F

Unpartitioned space /dev/nvme0n1: 65.76 GiB, 70610066944 bytes, 137910287 sectors
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes

    Start       End   Sectors  Size
838862848 976773134 137910287 65.8G
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这个 65.8G 就是我们之前预留的空间。&lt;/p&gt;
&lt;p&gt;输入 n 添加新的分区，默认是利用剩余空间的全部。这里敲三次回车全部默认即可。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Command (m for help): n
Partition number (4-128, default 4): 
First sector (838860801-976773134, default 838862848): 
Last sector, +/-sectors or +/-size{K,M,G,T,P} (838862848-976773134, default 976773119): 

Created a new partition 4 of type &#39;Linux filesystem&#39; and of size 65.8 GiB.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果不是利用全部剩余空间，则可以通过输入 &lt;code&gt;+100G&lt;/code&gt; 这样的内容来设置要添加的分区大小。&lt;/p&gt;
&lt;p&gt;输入 p 显示修改之后的分区表：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Command (m for help): p
Disk /dev/nvme0n1: 465.76 GiB, 500107862016 bytes, 976773168 sectors
Disk model: WDC WDS500G1B0C-00S6U0                  
Units: sectors of 1 * 512 = 512 bytes
Sector size (logical/physical): 512 bytes / 512 bytes
I/O size (minimum/optimal): 512 bytes / 512 bytes
Disklabel type: gpt
Disk identifier: 000372CE-8B4D-4B12-974B-99C231DB3D67

Device             Start       End   Sectors  Size Type
/dev/nvme0n1p1        34      2047      2014 1007K BIOS boot
/dev/nvme0n1p2      2048   2099199   2097152    1G EFI System
/dev/nvme0n1p3   2099200 838860800 836761601  399G Linux LVM
/dev/nvme0n1p4 838862848 976773119 137910272 65.8G Linux filesystem
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以看到我们新加的 nvme0n1p4 分区大小为 65.8G。&lt;/p&gt;
&lt;p&gt;检查无误，输入 w 写入修改操作并退出。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Command (m for help): w
The partition table has been altered.
Syncing disks.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在 pve 下执行&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;fdisk -l 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;再次检查分区情况：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;......
Device             Start       End   Sectors  Size Type
/dev/nvme0n1p1        34      2047      2014 1007K BIOS boot
/dev/nvme0n1p2      2048   2099199   2097152    1G EFI System
/dev/nvme0n1p3   2099200 838860800 836761601  399G Linux LVM
/dev/nvme0n1p4 838862848 976773119 137910272 65.8G Linux filesystem
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;至此 timeshift 分区准备OK.&lt;/p&gt;
&lt;h3 id=&#34;格式化-timeshift-分区&#34;&gt;格式化 timeshift 分区&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkfs.ext4 /dev/nvme0n1p4
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;对分区进行格式化，格式为 ext4：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
mke2fs 1.47.0 (5-Feb-2023)
Discarding device blocks: done                            
Creating filesystem with 17238784 4k blocks and 4317184 inodes
Filesystem UUID: 2411eb4e-67f1-4c7d-b633-17df1fa0c127
Superblock backups stored on blocks: 
	32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632, 2654208, 
	4096000, 7962624, 11239424

Allocating group tables: done                            
Writing inode tables: done                            
Creating journal (131072 blocks): done
Writing superblocks and filesystem accounting information: done 
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;安装-timeshift&#34;&gt;安装 timeshift&lt;/h2&gt;
&lt;p&gt;具体参考这里：&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://skyao.io/learning-ubuntu-server/docs/installation/timeshift/install/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://skyao.io/learning-ubuntu-server/docs/installation/timeshift/install/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;安装配置完成后，执行&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;timeshift --list
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;查看 timeshift 情况：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
First run mode (config file not found)
Selected default snapshot type: RSYNC
Mounted &#39;/dev/nvme0n1p4&#39; at &#39;/run/timeshift/5364/backup&#39;
Device : /dev/nvme0n1p4
UUID   : 2411eb4e-67f1-4c7d-b633-17df1fa0c127
Path   : /run/timeshift/5364/backup
Mode   : RSYNC
Status : No snapshots on this device
First snapshot requires: 0 B

No snapshots found
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;使用-timeshift-进行备份&#34;&gt;使用 timeshift 进行备份&lt;/h2&gt;
&lt;h3 id=&#34;设置自动备份&#34;&gt;设置自动备份&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;vi /etc/timeshift/timeshift.json
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;打开 timeshift 配置文件，修改以下内容&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;{
  &amp;quot;schedule_monthly&amp;quot; : &amp;quot;true&amp;quot;,
  &amp;quot;schedule_weekly&amp;quot; : &amp;quot;true&amp;quot;,
  &amp;quot;schedule_daily&amp;quot; : &amp;quot;true&amp;quot;,
  &amp;quot;schedule_hourly&amp;quot; : &amp;quot;false&amp;quot;,
  &amp;quot;schedule_boot&amp;quot; : &amp;quot;false&amp;quot;,
  &amp;quot;count_monthly&amp;quot; : &amp;quot;2&amp;quot;,
  &amp;quot;count_weekly&amp;quot; : &amp;quot;3&amp;quot;,
  &amp;quot;count_daily&amp;quot; : &amp;quot;5&amp;quot;,
  &amp;quot;count_hourly&amp;quot; : &amp;quot;6&amp;quot;,
  &amp;quot;count_boot&amp;quot; : &amp;quot;5&amp;quot;,
}

&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;对于软路由机器，由于是长期开机并且改动不过，因此 schedule_monthly / schedule_weekly /  schedule_daily 设置为 true，数量用默认值。&lt;/p&gt;
&lt;h3 id=&#34;排除不需要备份的内容&#34;&gt;排除不需要备份的内容&lt;/h3&gt;
&lt;p&gt;默认情况下 timeshift 的配置文件中已经设置了 exclude：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;{
  &amp;quot;exclude&amp;quot; : [
    &amp;quot;/var/lib/ceph/**&amp;quot;,
    &amp;quot;/root/**&amp;quot;
  ],
  &amp;quot;exclude-apps&amp;quot; : []
}

&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;/var/lib/ceph/&lt;/code&gt;： ceph 相关的文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;/root/&lt;/code&gt;: root 用户的 home 路径，如果使用其他用户，也需要将它们的 home 目录加入进来。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但这些是不够的，还需要增加以下内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;/var/lib/vz/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;pve的各种文件，包括虚拟机，模版，备份，上传的iso文件等都在这里，这些文件太大，不适合用 timeshift 备份，因此必须排除。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ls /var/lib/vz
dump  images  private  snippets  template
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;dump： 这里保存 pve backup 备份下来的虚拟机镜像文件&lt;/li&gt;
&lt;li&gt;images： 这里保存 pve 虚拟机镜像文件&lt;/li&gt;
&lt;li&gt;template： iso 子目录中保存的是上传到 pve 的各种 iso/img 文件&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;/etc/pve/qemu-server/&lt;/code&gt;: pve 的虚拟机配置文件，这些文件也不要用 timeshift 备份，避免恢复时把虚拟机文件也给覆盖了。虚拟机文件的备份会由下一节中提到的自动脚本进行备份。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;/mnt/pve&lt;/code&gt;: 在 pve 下使用 nfs 存储时，远程 nfs 会自动 mount 到这个目录下，这些文件肯定也不能被 timeshift 备份。因此必须排除。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最后通过设置的 exclude 为：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;{
  ......
  &amp;quot;exclude&amp;quot; : [
    &amp;quot;/var/lib/ceph/**&amp;quot;,
    &amp;quot;/root/**&amp;quot;,
    &amp;quot;/var/lib/vz/**&amp;quot;,
    &amp;quot;/etc/pve/qemu-server/**&amp;quot;,
    &amp;quot;/mnt/pve/**&amp;quot;
  ],
}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;设置自动备份虚拟机文件&#34;&gt;设置自动备份虚拟机文件&lt;/h3&gt;
&lt;p&gt;见下一章，推荐完成这个操作之后再执行手工备份。&lt;/p&gt;
&lt;h3 id=&#34;手工备份&#34;&gt;手工备份&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;timeshift --create --comments &amp;quot;first backup after apt upgrade and basic soft install&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输入为：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Estimating system size...
Creating new snapshot...(RSYNC)
Saving to device: /dev/nvme0n1p4, mounted at path: /run/timeshift/6888/backup
Syncing files with rsync...
Created control file: /run/timeshift/6888/backup/timeshift/snapshots/2023-07-25_21-10-04/info.json
RSYNC Snapshot saved successfully (41s)
Tagged snapshot &#39;2023-07-25_21-10-04&#39;: ondemand
------------------------------------------------------------------------------
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;查看当前备份情况：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;timeshift --list                                                                      
Mounted &#39;/dev/nvme0n1p4&#39; at &#39;/run/timeshift/7219/backup&#39;
Device : /dev/nvme0n1p4
UUID   : 2411eb4e-67f1-4c7d-b633-17df1fa0c127
Path   : /run/timeshift/7219/backup
Mode   : RSYNC
Status : OK
1 snapshots, 64.5 GB free

Num     Name                 Tags  Description                                            
------------------------------------------------------------------------------
0    &amp;gt;  2023-07-25_21-10-04  O     first backup after apt upgrade and basic soft install  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;结合备份之前看到的 timeshift 备份分区的大小为 65.8G，减去这里的 64.5 GB free，也就是这个备份用掉了 1.3 G 的磁盘空间。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>【归档】PVE环境下硬盘识别问题</title>
        <link>https://tflasp.fun/2024/pve-maxio1602/</link>
        <pubDate>Wed, 21 Aug 2024 00:00:00 +0000</pubDate>
        
        <guid>https://tflasp.fun/2024/pve-maxio1602/</guid>
        <description>&lt;h2 id=&#34;问题复现&#34;&gt;问题复现&lt;/h2&gt;
&lt;p&gt;爱国者P7000Z（以及所有使用MAXIO 1602主控的PCIe4.0固态）有个坑，两块以上只认一块。
经分析发现，是联芸MAP1602主控的共性问题。
给官方Linux内核提出了patch，内核6.4版本开始会集成进来。&lt;/p&gt;
&lt;h2 id=&#34;解决方法&#34;&gt;解决方法&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;diff --git a/drivers/nvme/host/pci.c b/drivers/nvme/host/pci.c
--- a/drivers/nvme/host/pci.c
+++ b/drivers/nvme/host/pci.c
@@ -3424,6 +3424,8 @@ static const struct pci_device_id nvme_id_table[] = {
                 .driver_data = NVME_QUIRK_BOGUS_NID, },
         { PCI_DEVICE(0x1e4B, 0x1202),   /* MAXIO MAP1202 */
                 .driver_data = NVME_QUIRK_BOGUS_NID, },
+        { PCI_DEVICE(0x1e4B, 0x1602),   /* MAXIO MAP1602 */
+                .driver_data = NVME_QUIRK_BOGUS_NID, },
         { PCI_DEVICE(0x1cc1, 0x5350),   /* ADATA XPG GAMMIX S50 */
                 .driver_data = NVME_QUIRK_BOGUS_NID, },
         { PCI_DEVICE(0x1dbe, 0x5236),   /* ADATA XPG GAMMIX S70 */
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;PVE 8.0 beta最新，内核是6.2.16-1-pve，所以目前不支持联芸MAP1602主控的多块NVMe同时使用。
现在需要使用的，修改不难，
下载源码，找到代码中drivers/nvme/host/pci.c添加这两行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;        { PCI_DEVICE(0x1e4B, 0x1602),   /* MAXIO MAP1602 */
                .driver_data = NVME_QUIRK_BOGUS_NID, },
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;重新编译安装，就好了。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;20230616 分享编译好的内核，直接用就好，基于PVE 8.0beta源码6.2.16-1修改：
链接: &lt;a class=&#34;link&#34; href=&#34;https://pan.baidu.com/s/1qdF8AVyjUOX_gL8Fxe9g6A?pwd=CHH1&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://pan.baidu.com/s/1qdF8AVyjUOX_gL8Fxe9g6A?pwd=CHH1&lt;/a&gt; 提取码: CHH1&lt;/p&gt;
&lt;p&gt;20230708 分享编译好的内核，直接用就好，基于PVE 8.0正式版源码6.2.16-3修改：
链接: &lt;a class=&#34;link&#34; href=&#34;https://pan.baidu.com/s/1juvlOR6uA7G53eiCJTAzGw?pwd=CHH2&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://pan.baidu.com/s/1juvlOR6uA7G53eiCJTAzGw?pwd=CHH2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;20230712 分享编译好的内核，直接用就好，基于PVE 8.0正式版源码6.2.16-4修改：
链接: &lt;a class=&#34;link&#34; href=&#34;https://pan.baidu.com/s/1xHShA5LBaVl2uWH4cIUHGg?pwd=CHH3&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://pan.baidu.com/s/1xHShA5LBaVl2uWH4cIUHGg?pwd=CHH3&lt;/a&gt; 提取码: CHH3&lt;/p&gt;
&lt;p&gt;20230713 分享基于PVE 8.0正式版源码6.2.16-4修改的4TB未验证测试版，按114楼增加了延时属性。
链接: &lt;a class=&#34;link&#34; href=&#34;https://pan.baidu.com/s/1Wgbva1awvubtBFdxhx0vaA?pwd=CHH4&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://pan.baidu.com/s/1Wgbva1awvubtBFdxhx0vaA?pwd=CHH4&lt;/a&gt; 提取码: CHH4&lt;/p&gt;
&lt;p&gt;20230908 分享基于PVE 8.0正式版源码6.2.16-12修改的4TB未验证测试版，增加延时属性及初始化延迟。
链接: &lt;a class=&#34;link&#34; href=&#34;https://pan.baidu.com/s/1D-0qjzBop9d_tOcRu7bs3Q?pwd=CHH5&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://pan.baidu.com/s/1D-0qjzBop9d_tOcRu7bs3Q?pwd=CHH5&lt;/a&gt; 提取码: CHH5&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;安装方法：
上传文件至PVE，登录PVE执行：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dpkg -i *.deb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;重启即可。&lt;/p&gt;
&lt;h2 id=&#34;参考资料&#34;&gt;参考资料&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.chiphell.com/forum.php?mod=viewthread&amp;amp;tid=2524660&amp;amp;extra=page%3D1&amp;amp;ordertype=1&amp;amp;mobile=no&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;ChipHell&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>【归档】PVE进入Recovery模式恢复系统</title>
        <link>https://tflasp.fun/2024/pve-recovery/</link>
        <pubDate>Wed, 21 Aug 2024 00:00:00 +0000</pubDate>
        
        <guid>https://tflasp.fun/2024/pve-recovery/</guid>
        <description>&lt;h2 id=&#34;问题重现&#34;&gt;问题重现&lt;/h2&gt;
&lt;p&gt;有时在经过错误的配置之后，pve 系统会无法使用，甚至无法进入系统和页面控制台。&lt;/p&gt;
&lt;p&gt;此时需要有其他的方案来修复系统。&lt;/p&gt;
&lt;h2 id=&#34;恢复模式&#34;&gt;恢复模式&lt;/h2&gt;
&lt;h3 id=&#34;进入恢复模式&#34;&gt;进入恢复模式&lt;/h3&gt;
&lt;p&gt;开机，选择 &amp;ldquo;Advanced options for Proxmox VE GNU/Linux&amp;rdquo; ，然后选择 Rescue mode。&lt;/p&gt;
&lt;p&gt;用 root 密码登录即可。&lt;/p&gt;
&lt;h3 id=&#34;启动集群&#34;&gt;启动集群&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;systemctl start pve-cluster
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这是就可以访问目录 &lt;code&gt;/etc/pve&lt;/code&gt; 来操作集群和虚拟机了。&lt;/p&gt;
&lt;h3 id=&#34;操作虚拟机&#34;&gt;操作虚拟机&lt;/h3&gt;
&lt;p&gt;比如关闭有问题的虚拟机：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;qm stop id
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;修改虚拟机配置&#34;&gt;修改虚拟机配置&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd /etc/pve/nodes/&amp;lt;node_name&amp;gt;/qume-server
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里能看到各个虚拟机的配置文件，打开相应的配置文件修改即可，比如取消虚拟机的开机，只要将 onboot 修改为 0.&lt;/p&gt;
</description>
        </item>
        <item>
        <title>RAM</title>
        <link>https://tflasp.fun/2024/intoram/</link>
        <pubDate>Mon, 19 Aug 2024 00:00:00 +0000</pubDate>
        
        <guid>https://tflasp.fun/2024/intoram/</guid>
        <description>&lt;img src="https://img.picui.cn/free/2024/08/19/66c31be1e7277.jpg" alt="Featured image of post RAM" /&gt;&lt;h2 id=&#34;存储系统&#34;&gt;存储系统&lt;/h2&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://img.picui.cn/free/2024/08/19/66c31cc2680b0.jpg&#34; &gt;
		&lt;img src=&#34;https://img.picui.cn/free/2024/08/19/66c31cc2680b0.jpg&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://img.picui.cn/free/2024/08/19/66c31ca2721b9.jpg&#34; &gt;
		&lt;img src=&#34;https://img.picui.cn/free/2024/08/19/66c31ca2721b9.jpg&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;ram&#34;&gt;RAM&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;RAM&lt;/code&gt;（随机访问存储器）： RAM 是计算机中用于临时存储数据和程序的一种类型的存储器。它是一种易失性存储器，意味着当计算机断电或重新启动时，RAM 中的数据将会丢失。RAM 具有高速读写的特性，因此在计算机中被广泛用于存储运行中的程序和正在处理的数据。在计算机运行时，操作系统和应用程序会将需要快速访问的数据和指令加载到 RAM 中，以便 CPU 能够快速地读取和处理它们。RAM 的容量通常以 GB（Gigabytes）为单位，如 4GB、8GB、16GB 等。&lt;/p&gt;
&lt;p&gt;主存储器（主内存）： 主存储器指的是计算机中的 RAM，用于存储正在运行的程序和数据。CPU 可以直接访问主存储器中的数据，因此它是计算机中最快速的存储器类型。&lt;/p&gt;
&lt;p&gt;辅助存储器(ROM)： 辅助存储器指的是计算机中的非易失性存储设备，如硬盘、SSD、SD 卡等。它们的存储速度相对较慢，但可以长期保存数据，即使计算机断电也不会丢失数据。辅助存储器主要用于长期存储和备份数据，以及安装操作系统和应用程序。&lt;/p&gt;
&lt;h2 id=&#34;sram与dram&#34;&gt;SRAM与DRAM&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;th&gt;特点&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;SRAM（&lt;code&gt;Static Random Access Memory&lt;/code&gt;，&lt;strong&gt;静态&lt;/strong&gt;随机存储器）&lt;/td&gt;
&lt;td&gt;它是一种具有静止存取功能的内存，不需要刷新电路即能保存它内部存储的数据&lt;/td&gt;
&lt;td&gt;优点是速度快，不必配合内存刷新电路，可提高整体的工作效率。缺点是集成度低，功耗较大，相同的容量体积较大，而且价格较高，少量用于关键性系统以提高效率。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DRAM（&lt;code&gt;Dynamic Random Access Memory&lt;/code&gt;，&lt;strong&gt;动态&lt;/strong&gt;随机存储器)&lt;/td&gt;
&lt;td&gt;DRAM只能将数据保持很短的时间。为了保持数据，DRAM使用电容存储，所以必须隔一段时间刷新（refresh）一次，如果存储单元没有被刷新，存储的信息就会丢失&lt;/td&gt;
&lt;td&gt;必须刷新，后面衍生出DDR，DDR2，DDR3，DDR4，DDR5&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;ddr基础&#34;&gt;DDR基础&lt;/h2&gt;
&lt;p&gt;我们常说的DDR，亦即&lt;code&gt;DDR SDRAM&lt;/code&gt;，指的是PC端或者消费电子（手机，平板）中的内存，是 “&lt;code&gt;Double Data Rate Synchronous Dynamic Random Access Memory&lt;/code&gt;”（双数据率同步动态随机存储器）的简称，它 允许在时钟脉冲的上升沿和下降沿传输数据，其主要作用是为了和CPU频率同步，进而大大提高数据传输效率。
  SDRAM从发展到现在已经经历了五代，分别是：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;第一代SDR SDRAM，单边沿传输数据；
第二代DDR SDRAM，允许在时钟脉冲的上升沿和下降沿传输数据；
第三代DDR2 SDRAM，拥有两倍于上一代DDR内存预读取能力(即4bit数据读预取能力)；
第四代DDR3 SDRAM，具备更低的工作电压(1.5v)，240线接口，支持8bit预读；
第五代DDR4 SDRAM，16bit预取机制（DDR3为8bit），同样内核频率下理论速度是DDR3的两倍，；
目前已经发展到DDR5 SDRAM；
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://img.picui.cn/free/2024/08/19/66c31c4578cf7.jpg&#34; &gt;
		&lt;img src=&#34;https://img.picui.cn/free/2024/08/19/66c31c4578cf7.jpg&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;DDR1-5各代实物图对比&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;DDR1-5各代实物图对比&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://img.picui.cn/free/2024/08/19/66c31cf41f395.jpg&#34; &gt;
		&lt;img src=&#34;https://img.picui.cn/free/2024/08/19/66c31cf41f395.jpg&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;   DDR核心技术点就在于：（1）双沿传输。（2）预取prefetch。
   DDR的频率：（1）核心频率、（2）时钟频率、（3）数据传输频率；核心频率就是内存的工作频率；DDR1内存的核心频率是和时钟频率相同的，到了DDR2和DDR3时才有了时钟频率的概念，就是将核心频率通过倍频技术得到的一个频率。数据传输频率就是传输数据的频率。DDR1预读取是2位，DDR2预读取是4位，DDR3预读取是8位…&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://img.picui.cn/free/2024/08/19/66c31d0f10a71.jpg&#34; &gt;
		&lt;img src=&#34;https://img.picui.cn/free/2024/08/19/66c31d0f10a71.jpg&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;   与DDR相比，LPDDR内存全称是&lt;code&gt;Low Power Double Data Rate SDRAM&lt;/code&gt;，中文意为低功耗双倍数据速率内存，又称为mDDR（&lt;code&gt;Mobile DDR SDRM&lt;/code&gt;），主要针对于&lt;strong&gt;移动端&lt;/strong&gt;电子产品。
   LPDDR4X可以看作是LPDDR4的省电优化版本，比LPDDR4功耗更低、更省电；目前市面上主流旗舰手机内存使用的都是&lt;code&gt;LPDDR4X&lt;/code&gt;和&lt;code&gt;LPDDR4&lt;/code&gt;，由于二者经常同时出现，名字也十分相似，所以很容易让人混淆。&lt;/p&gt;
&lt;h2 id=&#34;eccnone-ecc与reg-ecc&#34;&gt;ECC、None-ECC与REG-ECC&lt;/h2&gt;
&lt;p&gt;ECC，全称 &lt;code&gt;Error Correction Code&lt;/code&gt;，是一种可以自动检测并修复数据错误的类型的计算机数据存储。ECC 内存在存储数据时会生成校验码，当数据被重新读取时，它会使用这些校验码来检查是否有错误发生。如果检测到错误，ECC 内存会尝试自动修复这些错误，或者至少通知系统错误已经发生。&lt;/p&gt;
&lt;h4 id=&#34;11-工作原理&#34;&gt;1.1 工作原理&lt;/h4&gt;
&lt;p&gt;ECC内存通过奇偶校验或更复杂的纠错码来检测和纠正内存中的数据错误。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://img.picui.cn/free/2024/08/19/66c31cd99a268.jpg&#34; &gt;
		&lt;img src=&#34;https://img.picui.cn/free/2024/08/19/66c31cd99a268.jpg&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;1、奇偶校验位： 奇偶校验是一种简单的错误检测方法，它通过在数据字节末尾添加一个额外的位（奇校验位或偶校验位）来检测错误。根据校验位的设置，数据字节的总位数可以是奇数或偶数。例如，如果校验位设置为使数据字节的总位数为奇数，那么校验位将被设置为确保总位数为奇数。如果在数据传输过程中发生了错误，奇偶校验位将不匹配，从而指示出现错误。&lt;/p&gt;
&lt;p&gt;2、纠错码： 纠错码通常更复杂，可以检测和纠正多个位的错误。ECC内存使用纠错码，如Hamming码或其他类似的编码方案，生成校验位。这些校验位用于检测和纠正内存中的数据错误。例如，Hamming码可以纠正单个位错误，以及检测多位错误。&lt;/p&gt;
&lt;p&gt;3、错误检测和纠正： 当数据从内存中读取时，内存控制器会计算校验位并与存储的校验位进行比较。如果检测到校验位不匹配，内存控制器将确定发生了错误，并尝试纠正错误（如果支持）。这使ECC内存能够在读取数据时检测到单个位错误并进行纠正，以确保数据的完整性。&lt;/p&gt;
&lt;p&gt;4、纠错能力： 纠错码的能力取决于其设计和级别。某些ECC内存可以纠正单个位错误，而其他更高级别的ECC内存可以纠正多个位错误。&lt;/p&gt;
&lt;h4 id=&#34;12-特点&#34;&gt;1.2 特点&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;1、错误检测和纠正： ECC内存使用附加的校验位来检测并纠正内存中的单个位错误。这意味着即使在内存硬件出现故障的情况下，服务器仍然可以正常运行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;2、数据完整性： ECC内存可确保存储在内存中的数据的完整性，因此在关键任务和数据中使用它可以防止数据损坏。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;3、可靠性： 由于其纠正能力，ECC内存在服务器环境中非常可靠，可以减少因内存故障而导致的服务器停机时间。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;4、成本： 由于其高级功能，ECC内存通常比非ECC内存更昂贵。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;13适用场景&#34;&gt;1.3适用场景&lt;/h4&gt;
&lt;p&gt;1、关键任务和数据： 对于需要高度可靠性和数据完整性的服务器，如金融机构、医疗保健、科学计算等，ECC内存是必不可少的选择。它可以检测并纠正内存中的单个位错误，防止数据损坏。&lt;/p&gt;
&lt;p&gt;2、大规模服务器： 在大规模数据中心环境中，单个位错误可能会发生，ECC内存有助于防止这些错误对整个系统的影响。&lt;/p&gt;
&lt;p&gt;3、虚拟化： 虚拟化环境中，多个虚拟机共享同一台物理服务器的内存。ECC内存可以减少虚拟机之间的内存冲突和数据错误。&lt;/p&gt;
&lt;p&gt;4、长时间运行： 如果您的服务器需要长时间运行，ECC内存有助于减少内存错误导致的系统崩溃的风险。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://img.picui.cn/free/2024/08/19/66c31d25dee9b.jpg&#34; &gt;
		&lt;img src=&#34;https://img.picui.cn/free/2024/08/19/66c31d25dee9b.jpg&#34;
			
			
			
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;none-ecc-内存&#34;&gt;None-ECC 内存&lt;/h3&gt;
&lt;h4 id=&#34;21-特点&#34;&gt;2.1 特点&lt;/h4&gt;
&lt;p&gt;1、性能： 由于不需要额外的校验计算，非ECC内存通常比ECC内存具有稍微更高的性能。&lt;/p&gt;
&lt;p&gt;2、成本： 非ECC内存相对便宜，适用于预算有限的服务器。&lt;/p&gt;
&lt;h4 id=&#34;22-适用场景&#34;&gt;2.2 适用场景&lt;/h4&gt;
&lt;p&gt;非ECC内存通常更适合一些性能密集型的应用和成本敏感型的环境，包括：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1、Web服务器： 对于大多数Web服务器，性能可能比数据完整性更重要。非ECC内存提供了更高的性能，并且通常更经济实惠。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;2、游戏服务器： 在游戏服务器中，快速响应时间和较低的延迟可能更加关键，而非ECC内存通常具备更高的性能。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;3、一般用途服务器： 对于一般用途的服务器，非ECC内存可能足够，因为数据完整性不是最重要的考虑因素。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;4、预算受限： 如果您的预算有限，非ECC内存通常更经济实惠。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        </item>
        <item>
        <title>SSD开卡</title>
        <link>https://tflasp.fun/2024/ssd-fw/</link>
        <pubDate>Sun, 11 Aug 2024 00:00:00 +0000</pubDate>
        
        <guid>https://tflasp.fun/2024/ssd-fw/</guid>
        <description>&lt;img src="https://tflasp.fun/2024/ssd-fw/SSDFW-MAIN.jpg" alt="Featured image of post SSD开卡" /&gt;&lt;h2 id=&#34;ssd开卡技术&#34;&gt;SSD开卡技术&lt;/h2&gt;
&lt;p&gt;SSD（固态硬盘）里采用慧荣主控的品牌很多，其中常见的慧荣主控型号有&lt;code&gt;SM2258XT&lt;/code&gt;、&lt;code&gt;SM2259XT&lt;/code&gt;、&lt;code&gt;SM2259XT2&lt;/code&gt;、&lt;code&gt;SM2259XT3&lt;/code&gt;、&lt;code&gt;SM2263XT&lt;/code&gt;等等，这些主控的SSD要是坏了或者掉盘了，在保质期里的可以返厂维修，如果过保了，我们还是有办法自己修复的，方法就是用量产软件来开卡。&lt;/p&gt;
&lt;h3 id=&#34;准备工作&#34;&gt;准备工作&lt;/h3&gt;
&lt;p&gt;准备SM2258XT开卡软件，找长方形的闪存颗粒，打开量产部落的闪存查询（或者FlashID官网）查询闪存ID与制程，输入闪存颗粒上面的编号来确定制程（黑片、打标片除外），然后再从&lt;a class=&#34;link&#34; href=&#34;http://club.liangchanba.com/forum-smi-1.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;量产部落&lt;/a&gt;上面下载开卡软件。&lt;/p&gt;
&lt;p&gt;准备一个SATA-USB转接硬盘盒（建议使用&lt;code&gt;ASM1153E&lt;/code&gt;/&lt;code&gt;JMS578&lt;/code&gt;主控的），把SSD插到硬盘盒里，用尖头镊子短接SSD的ROM孔，保持短接，把硬盘盒插到电脑USB接口上（固态U盘可以直接短接ROM，再插电脑USB即可）。&lt;/p&gt;
&lt;h3 id=&#34;开卡流程&#34;&gt;开卡流程&lt;/h3&gt;
&lt;p&gt;打开开卡软件，点击右侧“搜索设备”，待软件识别到SSD后，把尖头镊子取下。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 146; 
			flex-basis: 352px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/ssd-fw/mainpage.jpg&#34; data-size=&#34;1054x718&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/ssd-fw/mainpage.jpg&#34;
			width=&#34;1054&#34;
			height=&#34;718&#34;
			srcset=&#34;https://tflasp.fun/2024/ssd-fw/mainpage_hu097bcbea9f7afb8365547c9a0939e9ea_119697_480x0_resize_q75_box.jpg 480w, https://tflasp.fun/2024/ssd-fw/mainpage_hu097bcbea9f7afb8365547c9a0939e9ea_119697_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;点击“1024M”，查看ID显示是否正常，有无缺失（如下图，是Channel3的CE0错误），CE错误的原因可能是颗粒损坏、主控损坏、主板损坏、焊接不良等等，一一排除直到正确显示。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 139; 
			flex-basis: 334px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/ssd-fw/checkce.jpg&#34; data-size=&#34;1052x754&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/ssd-fw/checkce.jpg&#34;
			width=&#34;1052&#34;
			height=&#34;754&#34;
			srcset=&#34;https://tflasp.fun/2024/ssd-fw/checkce_hu0cc7b2de01dd58ca8c556d08c8080855_159840_480x0_resize_q75_box.jpg 480w, https://tflasp.fun/2024/ssd-fw/checkce_hu0cc7b2de01dd58ca8c556d08c8080855_159840_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;进入“设定”页面，点击右上角“编辑配置”，输入密码（两个空格），此时软件会解锁，我们可以对配置信息进行修改。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 140; 
			flex-basis: 336px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/ssd-fw/parameter.jpg&#34; data-size=&#34;1053x751&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/ssd-fw/parameter.jpg&#34;
			width=&#34;1053&#34;
			height=&#34;751&#34;
			srcset=&#34;https://tflasp.fun/2024/ssd-fw/parameter_hub0cfcecc8134562e0a54147a2803af88_168726_480x0_resize_q75_box.jpg 480w, https://tflasp.fun/2024/ssd-fw/parameter_hub0cfcecc8134562e0a54147a2803af88_168726_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;点击“自动”，软件会自动识别SSD的颗粒型号，一般选择第一个。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 696; 
			flex-basis: 1670px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/ssd-fw/flash.jpg&#34; data-size=&#34;724x104&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/ssd-fw/flash.jpg&#34;
			width=&#34;724&#34;
			height=&#34;104&#34;
			srcset=&#34;https://tflasp.fun/2024/ssd-fw/flash_hu2151609881272e0a356a79c2d9ba51a9_25053_480x0_resize_q75_box.jpg 480w, https://tflasp.fun/2024/ssd-fw/flash_hu2151609881272e0a356a79c2d9ba51a9_25053_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;下图中可以编辑SSD的产品名称、序列号等等。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 172; 
			flex-basis: 413px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/ssd-fw/info.jpg&#34; data-size=&#34;370x215&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/ssd-fw/info.jpg&#34;
			width=&#34;370&#34;
			height=&#34;215&#34;
			srcset=&#34;https://tflasp.fun/2024/ssd-fw/info_hue3f2efd80039254109471fb65c3c6676_23269_480x0_resize_q75_box.jpg 480w, https://tflasp.fun/2024/ssd-fw/info_hue3f2efd80039254109471fb65c3c6676_23269_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;下图可以设置SSD容量，自动或者手动都行，我一般用Auto自动。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 289; 
			flex-basis: 695px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/ssd-fw/disksize.jpg&#34; data-size=&#34;316x109&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/ssd-fw/disksize.jpg&#34;
			width=&#34;316&#34;
			height=&#34;109&#34;
			srcset=&#34;https://tflasp.fun/2024/ssd-fw/disksize_hu34fb98c277a854b22358e3b92ad125ba_8774_480x0_resize_q75_box.jpg 480w, https://tflasp.fun/2024/ssd-fw/disksize_hu34fb98c277a854b22358e3b92ad125ba_8774_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;SSD类型与功能，一般默认即可。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 257; 
			flex-basis: 618px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/ssd-fw/config.jpg&#34; data-size=&#34;394x153&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/ssd-fw/config.jpg&#34;
			width=&#34;394&#34;
			height=&#34;153&#34;
			srcset=&#34;https://tflasp.fun/2024/ssd-fw/config_hu1a4c59973af10291ed2c757cd20816ea_11283_480x0_resize_q75_box.jpg 480w, https://tflasp.fun/2024/ssd-fw/config_hu1a4c59973af10291ed2c757cd20816ea_11283_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;设置颗粒速度，可根据颗粒情况调节快慢，颗粒质量差需要降低频率，类似于超频的思路，自己尝试即可。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 283; 
			flex-basis: 681px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/ssd-fw/clock.jpg&#34; data-size=&#34;667x235&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/ssd-fw/clock.jpg&#34;
			width=&#34;667&#34;
			height=&#34;235&#34;
			srcset=&#34;https://tflasp.fun/2024/ssd-fw/clock_hu3bcd9b21441de15bf572e9e9eb87aeec_36550_480x0_resize_q75_box.jpg 480w, https://tflasp.fun/2024/ssd-fw/clock_hu3bcd9b21441de15bf572e9e9eb87aeec_36550_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;下图选择量产模式，一般情况下“Pretest”选择1；多个不同等级颗粒一起量产时，可勾选“忽略区分等级”（开启“忽略区分等级”功能）；“CH/CE组态”可以选择颗粒的某个CE量产（譬如4CE的颗粒坏掉1个CE，可以选择只量产另外2个&lt;code&gt;对称CE&lt;/code&gt;，这样就能量产出一半的容量，具体可自测）；部分颗粒量产可能报TranADJ错误，此时需要勾选“忽略Tran ADJ”。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 69; 
			flex-basis: 165px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/ssd-fw/cech.jpg&#34; data-size=&#34;379x548&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/ssd-fw/cech.jpg&#34;
			width=&#34;379&#34;
			height=&#34;548&#34;
			srcset=&#34;https://tflasp.fun/2024/ssd-fw/cech_hu1670046152ba4bef8ac4dd4837927f42_34636_480x0_resize_q75_box.jpg 480w, https://tflasp.fun/2024/ssd-fw/cech_hu1670046152ba4bef8ac4dd4837927f42_34636_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;rdt&#34;&gt;RDT&lt;/h3&gt;
&lt;p&gt;RDT测试，不勾选“RDT测试”即表示正常ISP开卡，开卡后重新拔插SSD再分区即可正常使用。勾选“RDT测试”相当于写入数据，再读取校验，用来标记坏块。下图左侧是正常ISP开卡，右侧是RDT测试开卡。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 256; 
			flex-basis: 615px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/ssd-fw/isprdt.jpg&#34; data-size=&#34;587x229&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/ssd-fw/isprdt.jpg&#34;
			width=&#34;587&#34;
			height=&#34;229&#34;
			srcset=&#34;https://tflasp.fun/2024/ssd-fw/isprdt_hu905340faaee6ecff0a19aa6486fadb4e_23328_480x0_resize_q75_box.jpg 480w, https://tflasp.fun/2024/ssd-fw/isprdt_hu905340faaee6ecff0a19aa6486fadb4e_23328_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;勾选“RDT测试”后，右边的“RDT设定”按钮即可启用，进行RDT相关设置（可参考下图）。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 144; 
			flex-basis: 347px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/ssd-fw/rdt.jpg&#34; data-size=&#34;792x547&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/ssd-fw/rdt.jpg&#34;
			width=&#34;792&#34;
			height=&#34;547&#34;
			srcset=&#34;https://tflasp.fun/2024/ssd-fw/rdt_hu83efca114b5647693e2e1f8950ae7f42_81902_480x0_resize_q75_box.jpg 480w, https://tflasp.fun/2024/ssd-fw/rdt_hu83efca114b5647693e2e1f8950ae7f42_81902_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;保存设置后点击“开始”按钮进行RDT量产。量产成功后，再把SSD/固态U盘通过硬盘盒或者转接线插到电源上（部分可使用充电头）会自动进行测试，RDT测试时间大约为N个小时（512GB的SSD一般要1.5个小时）。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 68; 
			flex-basis: 164px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/ssd-fw/rdt2.jpg&#34; data-size=&#34;250x364&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/ssd-fw/rdt2.jpg&#34;
			width=&#34;250&#34;
			height=&#34;364&#34;
			srcset=&#34;https://tflasp.fun/2024/ssd-fw/rdt2_hu20a2d5f672c13f3203934663f42668e6_34430_480x0_resize_q75_box.jpg 480w, https://tflasp.fun/2024/ssd-fw/rdt2_hu20a2d5f672c13f3203934663f42668e6_34430_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;RDT结束后可通过下图查看RDT结果，显示RDT PASS则为正常，如未通过可能是颗粒损坏严重。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 229; 
			flex-basis: 551px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/ssd-fw/rdtresult1.jpg&#34; data-size=&#34;1055x459&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/ssd-fw/rdtresult1.jpg&#34;
			width=&#34;1055&#34;
			height=&#34;459&#34;
			srcset=&#34;https://tflasp.fun/2024/ssd-fw/rdtresult1_huaab86167ea466376caafdd63393614b8_121883_480x0_resize_q75_box.jpg 480w, https://tflasp.fun/2024/ssd-fw/rdtresult1_huaab86167ea466376caafdd63393614b8_121883_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 223; 
			flex-basis: 537px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/ssd-fw/fail.jpg&#34; data-size=&#34;1043x466&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/ssd-fw/fail.jpg&#34;
			width=&#34;1043&#34;
			height=&#34;466&#34;
			srcset=&#34;https://tflasp.fun/2024/ssd-fw/fail_hu401dead367e9003d725762e16e0096e2_110072_480x0_resize_q75_box.jpg 480w, https://tflasp.fun/2024/ssd-fw/fail_hu401dead367e9003d725762e16e0096e2_110072_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;需要注意的是，RDT结束后仍需要进行一次ISP开卡，如下图在“Pretest”里可选择3（参考RDT坏块量产），并且不再勾选“RDT测试”，这样量产出的SSD已经屏蔽了坏块，使用起来相对稳定。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 82; 
			flex-basis: 198px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/ssd-fw/isp2.jpg&#34; data-size=&#34;385x465&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/ssd-fw/isp2.jpg&#34;
			width=&#34;385&#34;
			height=&#34;465&#34;
			srcset=&#34;https://tflasp.fun/2024/ssd-fw/isp2_hu2c56642c936437b7e693940821e8db96_32351_480x0_resize_q75_box.jpg 480w, https://tflasp.fun/2024/ssd-fw/isp2_hu2c56642c936437b7e693940821e8db96_32351_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;总结&#34;&gt;总结&lt;/h3&gt;
&lt;p&gt;总之最后都要不勾选“RDT测试”，进行ISP开卡才能使SSD正常使用。保存设置，回到“开卡”页面，点击“开始”，等待量产成功。量产成功后，需要重新插一下硬盘盒，对SSD进行分区格式化。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>年度巨献 | 深入浅出SSD</title>
        <link>https://tflasp.fun/2024/intossd/</link>
        <pubDate>Sun, 04 Aug 2024 00:00:00 +0000</pubDate>
        
        <guid>https://tflasp.fun/2024/intossd/</guid>
        <description>&lt;img src="https://tflasp.fun/2024/intossd/ssd.jpg" alt="Featured image of post 年度巨献 | 深入浅出SSD" /&gt;&lt;h2 id=&#34;ssd简介&#34;&gt;SSD简介&lt;/h2&gt;
&lt;p&gt;SSD (&lt;code&gt;Solid State Drive&lt;/code&gt;)，即固态硬盘，是一种以半导体闪存(&lt;code&gt;NAND Flash&lt;/code&gt;)作为介质的存储设备。和传统机械硬盘(&lt;code&gt;Hard Disk Drive，HDD&lt;/code&gt;)不同，SSD以半导体存储数据，用纯电子电路实现，没有任何机械设备，这就决定了它在性能、功耗、可靠性等方面和HDD有很大不同。&lt;/p&gt;
&lt;h2 id=&#34;ssd-协议与接口&#34;&gt;SSD 协议与接口&lt;/h2&gt;
&lt;h3 id=&#34;pcie协议&#34;&gt;PCIe协议&lt;/h3&gt;
&lt;h4 id=&#34;pcie带宽&#34;&gt;PCIe带宽&lt;/h4&gt;
&lt;p&gt;PCIe GEN1在链路上的传输速率为2.5Gb/s。PCIe在GEN1和GEN2采用了8b/10b编码方式，也就是说链路上传输10b数据，实际传输的有效数据只有8b。对于GEN1 x1的PCIe链路，传输的有效带宽为：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;2.5Gb/s * 2 * 8b/10b * B/8b = 0.5GB/s
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;2代表TX和RX&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 446; 
			flex-basis: 1070px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/intossd/pcie-link-widths.jpg&#34; data-size=&#34;785x176&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/intossd/pcie-link-widths.jpg&#34;
			width=&#34;785&#34;
			height=&#34;176&#34;
			srcset=&#34;https://tflasp.fun/2024/intossd/pcie-link-widths_hucc78108fa480238b43ddf08cd330f450_28856_480x0_resize_q75_box.jpg 480w, https://tflasp.fun/2024/intossd/pcie-link-widths_hucc78108fa480238b43ddf08cd330f450_28856_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&#34;pcie拓扑结构&#34;&gt;PCIe拓扑结构&lt;/h4&gt;
&lt;p&gt;PCIe主要的组件有RC（&lt;code&gt;Root Complex&lt;/code&gt;），SW（&lt;code&gt;Switch&lt;/code&gt;），EP（&lt;code&gt;Endpoint&lt;/code&gt;）。RC可以和所有device进行通信，一个EP也可以和一个PCIe系统中的EP来通信（Peer-to-Peer）。协议规定SW需要支持Peer-to-Peer，但对于有多个port的RC并没有要求。也就是说下图中 PCIe4 和 PCIe5 可以进行数据通信，但 PCIe4 和 PCIe6 就不一定能进行数据传输。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;RC&lt;/code&gt;是指连接CPU和存储器子系统以及PCIe结构的设备，可以支持一个或多个PCIe Port，下图中RC支持3个PCIe Port，每个Port连接EP或者SW，SW形成一个子层，又可以挂接其他PCIe设备。&lt;/p&gt;
&lt;p&gt;RC上的port可以进行数据交互，但协议并没有规定必须支持。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;SW&lt;/code&gt;是PCIe链路上进行转接的一类设备，拥有一个upstream prot和多个downstream port。可以将SW当作多个PCIe桥组成的设备。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;EP&lt;/code&gt;是PCIe链路的末端，有两种类型：Legacy Endpoint 和 PCIe Endpoint。传统EP支持IO事务，而且还需要能接收锁定事务。而PCIe EP不必支持IO事务和接收锁定事务，但必须支持MSI中断。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 139; 
			flex-basis: 335px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/intossd/PCIE-T.jpg&#34; data-size=&#34;750x537&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/intossd/PCIE-T.jpg&#34;
			width=&#34;750&#34;
			height=&#34;537&#34;
			srcset=&#34;https://tflasp.fun/2024/intossd/PCIE-T_hua44522a7eeebfe5b7cf11adb47567b30_71744_480x0_resize_q75_box.jpg 480w, https://tflasp.fun/2024/intossd/PCIE-T_hua44522a7eeebfe5b7cf11adb47567b30_71744_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;upstream port：在一个PCIe 设备上靠近RC方向的port。

downstream port：在一个PCIe 设别上远离RC方向的port。

Ingress port（入端口）：接收数据包的端口。

Egress port（出端口）：发送数据包的端口。
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在一个PCIe系统中，&lt;code&gt;upstream port&lt;/code&gt; 和 &lt;code&gt;downstream port&lt;/code&gt;是固定的，但是&lt;code&gt;Ingress port&lt;/code&gt; 和 &lt;code&gt;Egress port&lt;/code&gt; 是不固定的，和数据包的传输方向相关。例如：图中RC发起 MWr 事务到PCI-XP 4，那么SW上的upstream就是&lt;code&gt;Ingress port&lt;/code&gt;，downstream就是&lt;code&gt;Egress port&lt;/code&gt;。而当PCI-XP4发起 MWr到 RC时，那么SW的downstream就是 &lt;code&gt;Ingress port&lt;/code&gt;，upstream就是 &lt;code&gt;Egress port&lt;/code&gt;。&lt;/p&gt;
&lt;h4 id=&#34;pcie-transaction&#34;&gt;PCIe Transaction&lt;/h4&gt;
&lt;p&gt;事务：Transaction指 requester 和 completer 之间完成一次信息传送时所需要完成的一系列或多个数据包传送的过程。&lt;/p&gt;
&lt;p&gt;PCIe支持的事务类型与PCI、PCI-X支持的事务类型相同，包括存储器读和存储器写，IO读和IO写，配置读和配置写，此外还增加了一种新事务：消息（message）。&lt;/p&gt;
&lt;p&gt;PCIe事务可以分为Non-Posted 和 Posted。Non-Posted指 requester 发送TLP请求包给completer时，completer需要返回一个TLP完成数据包给requester。Posted指requester 发送TLP请求事务包给 completer时，completer不需要回复TLP完成数据包给requester。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 213; 
			flex-basis: 513px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/intossd/PCIE-NPPT.jpg&#34; data-size=&#34;740x346&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/intossd/PCIE-NPPT.jpg&#34;
			width=&#34;740&#34;
			height=&#34;346&#34;
			srcset=&#34;https://tflasp.fun/2024/intossd/PCIE-NPPT_hud1150bf66e860872a03bc23d18c2573a_59019_480x0_resize_q75_box.jpg 480w, https://tflasp.fun/2024/intossd/PCIE-NPPT_hud1150bf66e860872a03bc23d18c2573a_59019_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;PCIe的数据传输以数据包的形式进行传输，通信涉及一种称为处理层数据包（Transaction Layer packet， TLP）的数据包发送和接收。TLP包可以分为TLP请求的数据包和TLP完成的数据包。TLP请求的数据包依据PCIe事务的不同而不同，对于Non-Posted事务，需要completer 返回 TLP完成包给requester。TLP完成包带数据信息的称为CPLD，不带数据信息的称为CPL。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 109; 
			flex-basis: 262px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/intossd/PCIE-TLP-PT.jpg&#34; data-size=&#34;668x610&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/intossd/PCIE-TLP-PT.jpg&#34;
			width=&#34;668&#34;
			height=&#34;610&#34;
			srcset=&#34;https://tflasp.fun/2024/intossd/PCIE-TLP-PT_hu6b9e293d8ab5e7e5698ef0cb01537a68_94643_480x0_resize_q75_box.jpg 480w, https://tflasp.fun/2024/intossd/PCIE-TLP-PT_hu6b9e293d8ab5e7e5698ef0cb01537a68_94643_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;更为具体的PCIe协议细节在此就不再赘述了，感兴趣可以在网上搜索更多技术细节&lt;/p&gt;
&lt;h3 id=&#34;nvme介绍&#34;&gt;NVMe介绍&lt;/h3&gt;
&lt;h4 id=&#34;nvme综述&#34;&gt;NVMe综述&lt;/h4&gt;
&lt;p&gt;非易失性内存表达（&lt;code&gt;Non-Volatile Memory Express，NVMe&lt;/code&gt;）是一种通过 PCI Express 接口访问非易失性存储设备（如固态硬盘）的技术。相较于使用 SATA 接口和 AHCI 标准的传统机械硬盘（HDD），NVMe 的数据访问速度获得了极大提升。NVMe 技术正是为了利用 PCI Express 的高带宽、低延迟等优势而开发的。以往 PCI Express 接口主要应用在显卡、声卡等扩展卡上，现在也应用到了高速存储接口上。&lt;/p&gt;
&lt;p&gt;在 NVMe 驱动器面市之前，SSD 和 HDD 基本都使用 SATA 接口。但是，SATA 通信标准自身的性能瓶颈局限着 SSD 的发展空间，因此迫切需要一种新的接口标准。最初，开发者通过直接将 SSD 插在 PCI Express 插槽上来绕过这一瓶颈，但这种做法并不符合标准规范。&lt;/p&gt;
&lt;p&gt;NVMe 为所有制造商提供了一个统一的标准。现在，大多数现代 NVMe SSD 都采用了 M.2 接口规格，而 M.2 接口有多种尺寸规格。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 433; 
			flex-basis: 1040px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/intossd/M2-B&amp;amp;M.jpg&#34; data-size=&#34;811x187&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/intossd/M2-B&amp;amp;M.jpg&#34;
			width=&#34;811&#34;
			height=&#34;187&#34;
			srcset=&#34;https://tflasp.fun/2024/intossd/M2-B&amp;amp;M_hua32a7cce3f363fd021a7d010a6d64e27_35180_480x0_resize_q75_box.jpg 480w, https://tflasp.fun/2024/intossd/M2-B&amp;amp;M_hua32a7cce3f363fd021a7d010a6d64e27_35180_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;M.2 B&amp;M Key&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;M.2 B&amp;amp;M Key&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 155; 
			flex-basis: 372px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/intossd/M2-TYPE.jpg&#34; data-size=&#34;1005x647&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/intossd/M2-TYPE.jpg&#34;
			width=&#34;1005&#34;
			height=&#34;647&#34;
			srcset=&#34;https://tflasp.fun/2024/intossd/M2-TYPE_huf50fcd0f21947f7712fce707d09f8d14_172974_480x0_resize_q75_box.jpg 480w, https://tflasp.fun/2024/intossd/M2-TYPE_huf50fcd0f21947f7712fce707d09f8d14_172974_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;当然，除了消费级SSD,企业级SSD通常采用另一些接口来满足生产环境的需求，比如U.2、E1.S、E1.L、E3.S、E3.L等等规格。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 154; 
			flex-basis: 371px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/intossd/SSD-DC.jpg&#34; data-size=&#34;1061x686&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/intossd/SSD-DC.jpg&#34;
			width=&#34;1061&#34;
			height=&#34;686&#34;
			srcset=&#34;https://tflasp.fun/2024/intossd/SSD-DC_hu16da4d4a0d68f58b1a4240dae49955f3_156651_480x0_resize_q75_box.jpg 480w, https://tflasp.fun/2024/intossd/SSD-DC_hu16da4d4a0d68f58b1a4240dae49955f3_156651_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;配套的还有主板上对应的接口，图中包含了U.2（SFF8639）、SATA以及eSATA接口。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 211; 
			flex-basis: 507px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/intossd/MB-U2.jpg&#34; data-size=&#34;600x284&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/intossd/MB-U2.jpg&#34;
			width=&#34;600&#34;
			height=&#34;284&#34;
			srcset=&#34;https://tflasp.fun/2024/intossd/MB-U2_hu4e1a1efb74d2f44314dd737aa6474f16_46033_480x0_resize_q75_box.jpg 480w, https://tflasp.fun/2024/intossd/MB-U2_hu4e1a1efb74d2f44314dd737aa6474f16_46033_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;以下是一个不是很完全的总结：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 165; 
			flex-basis: 396px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/intossd/SUM1.jpg&#34; data-size=&#34;801x485&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/intossd/SUM1.jpg&#34;
			width=&#34;801&#34;
			height=&#34;485&#34;
			srcset=&#34;https://tflasp.fun/2024/intossd/SUM1_hub5fd42139d179c08f3918cbc4769c19e_99259_480x0_resize_q75_box.jpg 480w, https://tflasp.fun/2024/intossd/SUM1_hub5fd42139d179c08f3918cbc4769c19e_99259_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;ssd-主控与闪存&#34;&gt;SSD 主控与闪存&lt;/h2&gt;
&lt;p&gt;SATA SSD主控板实例：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 120; 
			flex-basis: 289px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/intossd/satassd1.jpg&#34; data-size=&#34;557x461&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/intossd/satassd1.jpg&#34;
			width=&#34;557&#34;
			height=&#34;461&#34;
			srcset=&#34;https://tflasp.fun/2024/intossd/satassd1_huec972013000b95c3b958ebd7ebe6b3eb_75476_480x0_resize_q75_box.jpg 480w, https://tflasp.fun/2024/intossd/satassd1_huec972013000b95c3b958ebd7ebe6b3eb_75476_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;主控概述&#34;&gt;主控概述&lt;/h3&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 140; 
			flex-basis: 338px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/intossd/CentrolCTRL1.jpg&#34; data-size=&#34;685x486&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/intossd/CentrolCTRL1.jpg&#34;
			width=&#34;685&#34;
			height=&#34;486&#34;
			srcset=&#34;https://tflasp.fun/2024/intossd/CentrolCTRL1_hubc9efb8826c5ba12dd1973ce5e025845_117719_480x0_resize_q75_box.jpg 480w, https://tflasp.fun/2024/intossd/CentrolCTRL1_hubc9efb8826c5ba12dd1973ce5e025845_117719_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;nand-flash概述&#34;&gt;NAND Flash概述&lt;/h3&gt;
&lt;p&gt;(该区域转载自&lt;a class=&#34;link&#34; href=&#34;https://news.skhynix.com.cn/flashback-the-evolution-of-nand-flash-technology/#:~:text=NAND%20%E9%97%AA%E5%AD%98%E6%98%AF%E4%B8%80%E7%A7%8D%E9%80%9A%E8%BF%87%E5%9C%A8%E6%B0%AE%E5%8C%96%E7%A1%85%E7%9A%84%E5%86%85%E9%83%A8%E8%A1%A5%E9%9B%86%E7%82%B9%E6%8D%95%E8%8E%B7%E7%94%B5%E5%AD%90%E6%88%96%E7%A9%BA%E7%A9%B4%E6%9D%A5%E5%AD%98%E5%82%A8%E4%BF%A1%E6%81%AF%E7%9A%84%E8%AE%BE%E5%A4%87%E3%80%82%20%E5%9C%A8%E8%BF%99%E7%A7%8D%E8%AE%BE%E5%A4%87%E4%B8%AD%EF%BC%8C%E5%B7%A5%E4%BD%9C%E5%8C%BA%E5%92%8C%E6%A0%85%E6%9E%81%E9%97%B4%E4%BC%9A%E7%95%99%E6%9C%89%E9%80%9A%E9%81%93%E4%BE%9B%E7%94%B5%E6%B5%81%E9%80%9A%E8%BF%87%E7%A1%85%E6%99%B6%E7%89%87%E8%A1%A8%E9%9D%A2%EF%BC%8C%E8%80%8C%E6%A0%B9%E6%8D%AE%E6%B5%AE%E7%BD%AE%E6%A0%85%E6%9E%81%E4%B8%AD%E5%AD%98%E5%82%A8%E7%9A%84%E7%94%B5%E8%8D%B7%E7%B1%BB%E5%9E%8B%EF%BC%8C%E4%BE%BF%E5%8F%AF%E8%BF%9B%E8%A1%8C%E5%AD%98%E5%82%A8%E7%BC%96%E7%A8%8B,%28%E2%80%9C1%E2%80%9D%29%20%E5%92%8C%E6%93%A6%E9%99%A4%20%28%E2%80%9C0%E2%80%9D%29%20%E4%BF%A1%E6%81%AF%E7%9A%84%E6%93%8D%E4%BD%9C%E3%80%82&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;这里&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;NAND 闪存的数据存储方法&lt;/p&gt;
&lt;p&gt;NAND 闪存是一种通过在氮化硅的内部补集点捕获电子或空穴来存储信息的设备。在这种设备中，工作区和栅极间会留有通道供电流通过硅晶片表面，而根据浮置栅极中存储的电荷类型，便可进行存储编程 (“1”) 和擦除 (“0”) 信息的操作。同时，在一个单元内存储 1 个比特的操作被称为单层单元 (SLC)。氮化硅内部捕获的电子数量与单元晶体管的阈值电压成正比，因此，当俘获大量电子时，即实现了高阈值电压；捕获少量电子会造成低阈值电压。&lt;/p&gt;
&lt;p&gt;通过将捕获的电子数量分成三份，并将每份的中间电压施加到单元栅极上，可以检查电流的流通状态，从而确定所捕获的电子数量。在这种情况下，存在四种状态，其中包括擦除状态：这就是 2 比特多层单元 (&lt;code&gt;2 bit-MLC&lt;/code&gt;)。2 比特多层单元的这四种状态可以描述为“11”、“10”、“01”和“00”，每个单元可以存储 2 个比特的信息。从定义而言，多层单元指的是一种状态，在这种状态下，一个单元具有多层的 2 个比特或更多比特；然而在本文中，多层单元是相对于单层单元（&lt;code&gt;SLC，Single Level Cell&lt;/code&gt;）（ 而言的。方便起见，本文将存储 2 个比特信息的多层单元（&lt;code&gt;MLC，Multi Level Cell&lt;/code&gt;）称为 2 比特多层单元。&lt;/p&gt;
&lt;p&gt;在相同的方法下，若产生八单元状态并存储 3 个比特的信息时，此类状态则被称为三层单元 (&lt;code&gt;TLC，Triple Level Cell&lt;/code&gt;)；同样，当产生十六单元状态并存储 4 个比特的信息时，则称为四层单元 (&lt;code&gt;QLC, Quadruple Level Cell&lt;/code&gt;)。单元状态越密集，一个单元内便可储存更多信息。举例来说，与单层单元(SLC) NAND 闪存相比，四层单元(QLC) NAND 闪存能够以 67.5% 的芯片尺寸存储相同数量的信息；但若想进行更多运行和读取的操作，就要增大单元状态的密度。相应地，由于单元状态之间的空间狭窄，更大的密度会使性能降级并出现读取错误的可能性，从而导致设备寿命缩短。因此，重要的是，首先要根据NAND闪存的应用领域决定是否优先考虑信息量，性能和寿命，然后选择适当的编程方法。&lt;/p&gt;
&lt;p&gt;3D/4D-NAND 与 NAND 闪存行业的发展趋势
当前，NAND 闪存正在从 2D 发展到 3D 和 4D。对于 2D-NAND，如果在同一区域实现更多的单元数量，形成更小的工作区和栅级，便能增大存储容量。直至 2010 年初，2D-NAND 中的扩展一直是这项技术的主要焦点所在；然而，由于精细图案结构的限制，且储存数据会随时间推移而丢失导致使用寿命缩短，该技术已无法再实现扩展。因此，3D-NAND逐渐取而代之，成为业界关注焦点，现在所有 NAND 制造商都在开发和制造 3D-NAND 产品。&lt;/p&gt;
&lt;p&gt;在 3D-NAND 的结构中，存储容量会随着三维叠层中堆叠层数的增加而变大。3D-NAND 使用了堆叠多层氮氧化物的方法，形成一个被称为“塞子”的垂直深孔，在其中形成一个由氧化物-氮化物-氧化物制成的存储设备。通过这种方法，仅需少量工艺即可同时形成大量单元。在 3D-NAND 中，电流通过位于圆柱单元中心的多晶硅通道，便能根据存储在氮化硅中的电荷类型实现存储编程和擦除信息。虽然2D-NAND 技术发展的目标是实现形成较小的单元， 3D-NAND 的核心技术却是实现更多层数的三维堆叠。&lt;/p&gt;
&lt;p&gt;近年来，为了在 3D-NAND 的基础上进一步增大存储容量，SK 海力士开发了 4D-NAND技术，使得芯片尺寸进一步缩小。4D-NAND 在 3D-NAND 单元下方形成外围电路，减少了外围电路所占的面积，从而实现存储容量的最大化并降低 NAND 闪存的成本。经过几代技术的发展，当前的半导体行业已实现了用更多层数存储更多信息，包括 SK 海力士在内的业界领先企业完成了多达 128 层的产品开发和投产准备，甚至正在研发更多层的产品设备。&lt;/p&gt;
&lt;h3 id=&#34;nand-flash-数据存储单元整体架构&#34;&gt;NAND Flash 数据存储单元整体架构&lt;/h3&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 213; 
			flex-basis: 512px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/intossd/NANDFLASH1.jpg&#34; data-size=&#34;1061x497&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/intossd/NANDFLASH1.jpg&#34;
			width=&#34;1061&#34;
			height=&#34;497&#34;
			srcset=&#34;https://tflasp.fun/2024/intossd/NANDFLASH1_hu5be419e5ec358d2e9389edfe3049eb88_69830_480x0_resize_q75_box.jpg 480w, https://tflasp.fun/2024/intossd/NANDFLASH1_hu5be419e5ec358d2e9389edfe3049eb88_69830_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;NAND Flash 数据存储单元整体架构&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;NAND Flash 数据存储单元整体架构&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 162; 
			flex-basis: 389px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/intossd/name-a1.jpg&#34; data-size=&#34;924x569&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/intossd/name-a1.jpg&#34;
			width=&#34;924&#34;
			height=&#34;569&#34;
			srcset=&#34;https://tflasp.fun/2024/intossd/name-a1_hu8b12a8a4884987d54d885de3dd995cf2_104274_480x0_resize_q75_box.jpg 480w, https://tflasp.fun/2024/intossd/name-a1_hu8b12a8a4884987d54d885de3dd995cf2_104274_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;NAND Flash 命名规则（部分）&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;NAND Flash 命名规则（部分）&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;nand-flash-封装&#34;&gt;NAND Flash 封装&lt;/h3&gt;
&lt;p&gt;随着目前产品小型化的需求越来越多，且可穿戴设备的逐渐普及，工程师们对于芯片小型化的需求也越来越强烈，这个就涉及到了芯片的封装工艺。这次，我们只针对NAND flash的封装进行介绍。&lt;/p&gt;
&lt;p&gt;芯片常用封装有：DIP、QFP、PFP、PGA、BGA、TSOP、COB等封装。这里主要介绍NAND FLASH常用的三种封装（TSOP、BGA、COB）。&lt;/p&gt;
&lt;p&gt;1、TSOP封装&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 186; 
			flex-basis: 448px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/intossd/tsop.jpg&#34; data-size=&#34;590x316&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/intossd/tsop.jpg&#34;
			width=&#34;590&#34;
			height=&#34;316&#34;
			srcset=&#34;https://tflasp.fun/2024/intossd/tsop_hu8beb56d09de7b7581561fa9a509b88a9_22230_480x0_resize_q75_box.jpg 480w, https://tflasp.fun/2024/intossd/tsop_hu8beb56d09de7b7581561fa9a509b88a9_22230_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;TSOP是“&lt;code&gt;Thin Small Outline Package&lt;/code&gt;”的缩写，意思是薄型小尺寸封装。TSOP内存是在芯片的周围做出引脚，采用SMT技术（表面安装技术）附着在PCB板的表面，装配高度不到1.27mm。具体到FLASH这类型芯，工艺主要是把FLASH晶圆固定在钢板框架上，然后通过打线把晶圆上的点连接到框架的PIN脚上，再对表面进行注胶。&lt;/p&gt;
&lt;p&gt;目前的最高的封闭技术能把四颗晶圆封闭在一个TSOP的FLASH内。此种TSOP封装的FLASH相对较厚。TSOP特点：电流大幅度变化时，引起输出电压较小，适合高频应用，操作比较方便（如方便手工贴片或拆片及反复利用），可靠性也比较高。同时TSOP封装具有成品率高。价格相对COB高，因此得到了极为广泛的应用。&lt;/p&gt;
&lt;p&gt;2、COB封装&lt;/p&gt;
&lt;p&gt;COB(chip on board) 板上芯片封装，是裸芯片贴装技术之一。半导体芯片交接贴装在印刷线路板上，芯片与PCB板是通过邦定连接的方法实现。NAND FLASH行业使用COB的封装方式主要是节省成本考虑。工程师先把外围电气走线画好，然后在PCB板上点红胶，把晶圆按指定方向及位置贴好。&lt;/p&gt;
&lt;p&gt;然后使用邦定机对晶圆进行邦定。确认邦定电气性能良好后，对晶圆表面及PCB板部分进行树脂覆盖固定。COB 是最简单的裸芯片贴装技术，但它的封装密度远不如TSOP和BGA技术。&lt;/p&gt;
&lt;p&gt;3、BGA封装&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 86; 
			flex-basis: 208px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/intossd/bga.jpg&#34; data-size=&#34;587x676&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/intossd/bga.jpg&#34;
			width=&#34;587&#34;
			height=&#34;676&#34;
			srcset=&#34;https://tflasp.fun/2024/intossd/bga_hu74173938d167e11410952cef36aadf53_96937_480x0_resize_q75_box.jpg 480w, https://tflasp.fun/2024/intossd/bga_hu74173938d167e11410952cef36aadf53_96937_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;BGA(ball grid array) 球形触点陈列，表面贴装型封装之一。在印刷基板的背面按陈列方式制作出球形凸点用以 代替引脚，在印刷基板的正面装配NANDflash 芯片，然后用模压树脂或灌封方法进行密封。封装本体也可做的比QFP(四侧引脚扁平封装)小。&lt;/p&gt;
&lt;p&gt;BGA主要特点：1、I/O引脚数虽然增多，但引脚之间的距离远大于QFP封装方式，提高了成品率 2、虽然BGA的功耗增加，但由于采用的是可控塌陷芯片法焊接，从而可以改善电热性能 3、信号传输延迟小，适应频率大大提高 4、组装可用共面焊接，可靠性大大提高。此封闭应用在NAND FLASH方面，主要影响是：1、可针对一些大尺寸晶圆进行封装。2、减小NAND flash封装片的面积，适用于对于主板尺寸要求严格的产品，特别是近些年来的可穿戴设备，对于产品尺寸的要求相当严格。3、此封闭大部分为原装片使用。黑片相对较少使用BGA。&lt;/p&gt;
&lt;h2 id=&#34;ftl简介&#34;&gt;FTL简介&lt;/h2&gt;
&lt;p&gt;FTL是&lt;code&gt;Flash Translation Layer&lt;/code&gt;(闪存转换层)的缩写，&lt;/p&gt;
&lt;p&gt;完成主机(或者用户，Host)逻辑地址空间到闪存(Flash)物理地址空间的翻译(Translation),或者说映射(Mapping)。SSD每把一笔用户逻辑数据写人闪存地址空间，便记录下该逻辑地址到物理地址的映射关系。当主机想读取该数据时，SSD便会根据这个映射，从闪存读取这笔数据然后返回给用户。&lt;/p&gt;
&lt;h3 id=&#34;基本功能&#34;&gt;基本功能&lt;/h3&gt;
&lt;p&gt;完成逻辑地址空间到物理地址空间的映射。&lt;/p&gt;
&lt;p&gt;闪存的特性：&lt;/p&gt;
&lt;p&gt;（1） 闪存块（Block）不能覆盖写，需要维护一张逻辑地址到物理地址的映射表，FTL需要做垃圾回 收，即使GC (Garbage Collection, 垃圾回收)&lt;/p&gt;
&lt;p&gt;（2） 闪存块有一定寿命，FTL需要做Wear Leveling,让数据写入均摊到每个闪存块上，即让每个块磨损都差不多，从而保证SSD具有最大的数据写入量。&lt;/p&gt;
&lt;p&gt;（3） 闪存块读的次数有限，次数过多会有读干扰（具体见第三章），FTL需要处理读干扰问题，当某个闪存块读的次数将要达到一定阈值时，FTL需要把这些数据从该闪存块上搬走，从而避免数据出错。&lt;/p&gt;
&lt;p&gt;（4） 数据的保存问题，必须上电，FTL才有效，好的FTL，就需要有处理数据保持问题的能力。&lt;/p&gt;
&lt;p&gt;（5） 坏块问题，FTL管理坏块。&lt;/p&gt;
&lt;p&gt;（6） 对MLC或TLC来说，存在&lt;code&gt;Lower Page corruption&lt;/code&gt;的问题。即掉电异常问题。好的FTL，应该有机制避免这个问题。&lt;/p&gt;
&lt;p&gt;（7） MLC或TLC的读写速度都不如SLC,但它们都可以配成SLC模式来使用。好的FTL，会利用该特性去改善SSD的性能和可靠性。&lt;/p&gt;
&lt;h3 id=&#34;映射管理&#34;&gt;映射管理&lt;/h3&gt;
&lt;p&gt;分类：&lt;/p&gt;
&lt;p&gt;（1）块映射：块映射有好的连续大尺寸的读写性能，但小尺寸数据的写性能是非常糟糕的。&lt;/p&gt;
&lt;p&gt;（2）页映射：闪存页远比闪存块多，因此需要更多的空间来存储映射表。但它的性能更好，尤其体现在随机写上面。为追求性能，SSD一般都采用页映射。&lt;/p&gt;
&lt;p&gt;（3）混合映射：块内采用页映射的方式。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;映射表大小=SSD大小/逻辑页大小
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;（准确来说，映射表大小是SSD容量大小的1/1024。前提条件是:映射页大小为4KB,物理地址用4Byte表示。）.&lt;/p&gt;
&lt;p&gt;映射表存储在DRAM中，&lt;/p&gt;
&lt;p&gt;HMD ( Host Memory Buffer，主机高速缓冲存储器)：主机在内存中专门划出一部分空间给SSD用，SSD可以把它当成自己的DRAM 使用。因此，映射表完全可以放到主机端的内存中去。&lt;/p&gt;
&lt;h3 id=&#34;垃圾回收&#34;&gt;垃圾回收&lt;/h3&gt;
&lt;p&gt;垃圾回收就是把某个闪存块上的有效数据读出来，重写，然后把该闪存块擦除，就得到新的可用闪存块了。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 114; 
			flex-basis: 274px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/intossd/GC.jpg&#34; data-size=&#34;354x310&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/intossd/GC.jpg&#34;
			width=&#34;354&#34;
			height=&#34;310&#34;
			srcset=&#34;https://tflasp.fun/2024/intossd/GC_hude396378753fa6e49e6de0acc9684669_24169_480x0_resize_q75_box.jpg 480w, https://tflasp.fun/2024/intossd/GC_hude396378753fa6e49e6de0acc9684669_24169_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;随机存取时候，如何挑选要回收的内存块，挑垃圾比较多的闪存块来回收，因为有效数据少，要搬移的数据少，这样腾出空闪存块的速度快。&lt;/p&gt;
&lt;h3 id=&#34;写放大wa&#34;&gt;写放大（WA）&lt;/h3&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 369; 
			flex-basis: 886px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/intossd/WA1.jpg&#34; data-size=&#34;192x52&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/intossd/WA1.jpg&#34;
			width=&#34;192&#34;
			height=&#34;52&#34;
			srcset=&#34;https://tflasp.fun/2024/intossd/WA1_hu03c908d3324a31e45f90a7f819c671ec_4170_480x0_resize_q75_box.jpg 480w, https://tflasp.fun/2024/intossd/WA1_hu03c908d3324a31e45f90a7f819c671ec_4170_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;写放大越大，意味着额外写人闪存的数据越多，一方面磨损闪存，减少SSD寿命，另一方面，写人这些额外数据会占用底层闪存带宽，影响SSD性能。&lt;/p&gt;
&lt;p&gt;解决方法：&lt;/p&gt;
&lt;p&gt;顺序写（不可控）&lt;/p&gt;
&lt;p&gt;增大OP（预留空间）（可控）&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 1284; 
			flex-basis: 3083px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/intossd/OP1.jpg&#34; data-size=&#34;334x26&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/intossd/OP1.jpg&#34;
			width=&#34;334&#34;
			height=&#34;26&#34;
			srcset=&#34;https://tflasp.fun/2024/intossd/OP1_huc66b06ef75fa0b8e2104aabafec68a60_4115_480x0_resize_q75_box.jpg 480w, https://tflasp.fun/2024/intossd/OP1_huc66b06ef75fa0b8e2104aabafec68a60_4115_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;OP越大，写放大越小：（很好理解，OP越大，每个闪存块有效数据越少，垃圾越多，因此需要重写更少的数据，因此写放大越小。同时，由于GC需要重写的数据越少，SSD满盘写性能也越好。）&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 163; 
			flex-basis: 391px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/intossd/OPSUM.jpg&#34; data-size=&#34;613x376&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/intossd/OPSUM.jpg&#34;
			width=&#34;613&#34;
			height=&#34;376&#34;
			srcset=&#34;https://tflasp.fun/2024/intossd/OPSUM_hu8b45d73e2871f3b5220b570fa03d0cb2_56019_480x0_resize_q75_box.jpg 480w, https://tflasp.fun/2024/intossd/OPSUM_hu8b45d73e2871f3b5220b570fa03d0cb2_56019_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;垃圾回收可以简单地分为三步&#34;&gt;垃圾回收可以简单地分为三步&lt;/h3&gt;
&lt;p&gt;1 )挑选源闪存块。（BPA算法）&lt;/p&gt;
&lt;p&gt;2 )从源闪存块中找有效数据。&lt;/p&gt;
&lt;p&gt;3)把有效数据写人到目标闪存块。&lt;/p&gt;
&lt;h3 id=&#34;垃圾回收时机&#34;&gt;垃圾回收时机&lt;/h3&gt;
&lt;p&gt;（1）当用户写人数据时，如果可用的闪存块小于一定阈值，这时就需要做GC，以腾出空间给用户写。这时做的GC，叫作Foreground GC (前台垃圾回收)。(被动)&lt;/p&gt;
&lt;p&gt;（2）&lt;code&gt;Background GC&lt;/code&gt; (后台垃圾回收)，它是在SSD空闲(Idle)的时候，SSD主动去做的GC，这样在用户写人的时候就有充裕的可用闪存块，不需要临时抱佛脚(做&lt;code&gt;Foreground GC&lt;/code&gt;)，从而改善用户写人性能。但是，出于功耗考虑，有些SSD可能就不做后台垃圾回收了，当SSD空闲后，直接进入省电模式，或者做少量的GC，然后进人省电模式。（主动）&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Trim&lt;/code&gt;（移除）：新增的ATA命令(&lt;code&gt;Data Set Management&lt;/code&gt;)， 专为SSD而生&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 206; 
			flex-basis: 494px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/intossd/trim1.jpg&#34; data-size=&#34;464x225&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/intossd/trim1.jpg&#34;
			width=&#34;464&#34;
			height=&#34;225&#34;
			srcset=&#34;https://tflasp.fun/2024/intossd/trim1_hu760376fa8b6110008c57fc3608086e08_23859_480x0_resize_q75_box.jpg 480w, https://tflasp.fun/2024/intossd/trim1_hu760376fa8b6110008c57fc3608086e08_23859_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在没有Trim之前，SSD无法知道那些被删除的数据页是否无效，必须等到系统要求在相同的地方(用户空间、逻辑空间)写人数据时才知道那些数据是无效的，进而放心删除。&lt;/p&gt;
&lt;p&gt;一般FTL都有这3个表：&lt;/p&gt;
&lt;p&gt;（1）FTL映射表记录每个LBA对应的物理页位置；&lt;/p&gt;
&lt;p&gt;（2）&lt;code&gt;Valid Page Bit Map (VPBM)&lt;/code&gt;记录每个物理块上哪个页有有效数据；&lt;/p&gt;
&lt;p&gt;（3）&lt;code&gt;Valid Page Count (VPC)&lt;/code&gt;则记录每个物理块上的有效页个数。&lt;/p&gt;
&lt;p&gt;通常GC会使用VPC进行排序来回收最少有效页的闪存块; VPBM则是为了在GC时只读有用的数据，也有部分FTL会省略这个表。&lt;/p&gt;
&lt;p&gt;SSD收到Trim命令后，为了实现数据删除，固件要按顺序做以下的事情：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 292; 
			flex-basis: 701px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/intossd/ftl1.jpg&#34; data-size=&#34;421x144&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/intossd/ftl1.jpg&#34;
			width=&#34;421&#34;
			height=&#34;144&#34;
			srcset=&#34;https://tflasp.fun/2024/intossd/ftl1_hudbf14e1f374a048e96239a1158b20e0c_15191_480x0_resize_q75_box.jpg 480w, https://tflasp.fun/2024/intossd/ftl1_hudbf14e1f374a048e96239a1158b20e0c_15191_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;5~7是Trim命令处理后，GC的处理，不是Trim命令处理的部分。Trim命令不触发GC。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 417; 
			flex-basis: 1002px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/intossd/ftl2.jpg&#34; data-size=&#34;405x97&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/intossd/ftl2.jpg&#34;
			width=&#34;405&#34;
			height=&#34;97&#34;
			srcset=&#34;https://tflasp.fun/2024/intossd/ftl2_hud461f7907e7a5813635f12328a86e594_11404_480x0_resize_q75_box.jpg 480w, https://tflasp.fun/2024/intossd/ftl2_hud461f7907e7a5813635f12328a86e594_11404_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&#34;磨损平衡&#34;&gt;磨损平衡&lt;/h3&gt;
&lt;p&gt;磨损平衡，就是让SSD中的每个闪存块的磨损(擦除)都保持均衡。&lt;/p&gt;
&lt;p&gt;冷数据(&lt;code&gt;Cold Data&lt;/code&gt;)： 不经常更新的块&lt;/p&gt;
&lt;p&gt;热数据(&lt;code&gt;Hot Data&lt;/code&gt;)： 更新频繁的数据&lt;/p&gt;
&lt;p&gt;年老的(&lt;code&gt;Old&lt;/code&gt;)块： 擦写次数较多的块&lt;/p&gt;
&lt;p&gt;年轻的(&lt;code&gt;Young&lt;/code&gt;)块： 擦写次数较少的块 EC（擦除次数）&lt;/p&gt;
&lt;p&gt;SSD一般有动态磨损平衡(&lt;code&gt;Dynamic WL&lt;/code&gt;)和静态磨损平衡(&lt;code&gt;Static WL&lt;/code&gt;)两种算法。&lt;/p&gt;
&lt;p&gt;动态磨损平衡算法的基本思想是把热数据写到年轻的块上，即在拿一个新的闪存块用来写的时候，挑选擦写次数小的;&lt;/p&gt;
&lt;p&gt;静态磨损平衡算法基本思想是把冷数据写到年老的块上，即把冷数据搬到擦写次数比较多的闪存块上。&lt;/p&gt;
&lt;h3 id=&#34;掉电恢复&#34;&gt;掉电恢复&lt;/h3&gt;
&lt;p&gt;正常掉电：&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 259; 
			flex-basis: 623px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/intossd/outpower.jpg&#34; data-size=&#34;577x222&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/intossd/outpower.jpg&#34;
			width=&#34;577&#34;
			height=&#34;222&#34;
			srcset=&#34;https://tflasp.fun/2024/intossd/outpower_hu5ddef909ae9efba8e0839f537961b10b_37322_480x0_resize_q75_box.jpg 480w, https://tflasp.fun/2024/intossd/outpower_hu5ddef909ae9efba8e0839f537961b10b_37322_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;异常掉电：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;为防止异常掉电导致的数据丢失，一个简单的设计就是在SSD上加电容，SSD一旦检测到掉电，就让电容开始放电，然后把RAM中的数据刷到闪存上面去，从而避免数据丢失。
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;重构&#34;&gt;重构&lt;/h3&gt;
&lt;p&gt;SSD在把用户数据写到闪存的时候，会额外打包一些数据，我们叫它元数据，(&lt;code&gt;Meta Data&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;映射表恢复原理：&lt;/p&gt;
&lt;p&gt;只要全盘扫描整个闪存空间，就能获得所有的映射关系，最终完成整个映射表的重构。（time过长）&lt;/p&gt;
&lt;h3 id=&#34;坏块管理&#34;&gt;坏块管理&lt;/h3&gt;
&lt;p&gt;坏块主要来源于：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;	1、出厂坏块（Factory Bad Block）
	2、增长坏块（Grown Bad Block）
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;坏块管理策略：&lt;/p&gt;
&lt;p&gt;一是略过(Skip) 策略，&lt;/p&gt;
&lt;p&gt;二是替换(Replace)策略。（用户空间与预留空间）采用替换策略，SSD内部需维护一张重映射表(&lt;code&gt;Remap Table&lt;/code&gt;) ;&lt;/p&gt;
&lt;h3 id=&#34;slc-cache&#34;&gt;SLC Cache&lt;/h3&gt;
&lt;p&gt;SLC相对MLC和TLC来说，有更好的读写性能和更长的寿命。这里所说的SLC Cache是把MLC或者TLC里面的一些闪存块配置成SLC模式来访问。&lt;/p&gt;
&lt;p&gt;优点：&lt;/p&gt;
&lt;p&gt;（1） 性能考虑&lt;/p&gt;
&lt;p&gt;（2） 防止Lower Page数据被带坏&lt;/p&gt;
&lt;p&gt;（3） 解决闪存的缺陷&lt;/p&gt;
&lt;p&gt;（4） 更多的数据写入量&lt;/p&gt;
&lt;p&gt;强制写人策略能保护Lower Page数据，而后者不能。非强制SLC写入策略，具有更好的后期写入性能。&lt;/p&gt;
&lt;h3 id=&#34;rddr&#34;&gt;RD&amp;amp;DR&lt;/h3&gt;
&lt;p&gt;RD指的是&lt;code&gt;Read Disturb&lt;/code&gt;（读打扰），DR指的是&lt;code&gt;Data Retention&lt;/code&gt;（数据保留）。 两者都能导致数据丢失，但原理和固件处理方式都不一样。&lt;/p&gt;
&lt;p&gt;Host Based FTL：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Device Based&lt;/code&gt;存在以下缺点:&lt;/p&gt;
&lt;p&gt;（1）FTL架构通用，不能针对具体应用做定制化。&lt;/p&gt;
&lt;p&gt;（2）控制器芯片功能复杂，设计难度大，研发成本高。&lt;/p&gt;
&lt;p&gt;（3）闪存更新很快，一般每年闪存厂商都会推出新一代产品，有新的使用特性，需要控制器芯片做出修改，但是芯片改版成本很高。&lt;/p&gt;
&lt;p&gt;（4）企业级应用需要高性能、大容量，通用控制器芯片支持的最大性能和容量有限制。&lt;/p&gt;
&lt;p&gt;（5）企业级市场需求多种多样，有些需求需要控制器提供特殊功能支持，这些是通用SSD主控芯片无法提供的。&lt;/p&gt;
&lt;h3 id=&#34;host-based-ftl架构&#34;&gt;Host Based FTL架构&lt;/h3&gt;
&lt;p&gt;Host Based SSD一般的模式是把闪存的读写接口直接开放给驱动程序，这样驱动程序就能自行管理闪存内部资源。控制器大都采用可编程逻辑器件FPGA，功能比较简单，主要实现ECC纠错和闪存时序控制。如图所示，主机驱动直接管理闪存阵列，控制器只是起到ECC纠错算法和物理协议转换的作用。&lt;/p&gt;
</description>
        </item>
        <item>
        <title>【归档】PVE 8 安装与优化</title>
        <link>https://tflasp.fun/2024/pveinstall/</link>
        <pubDate>Mon, 15 Jul 2024 00:00:00 +0000</pubDate>
        
        <guid>https://tflasp.fun/2024/pveinstall/</guid>
        <description>&lt;img src="https://tflasp.fun/2024/pveinstall/pveinstaller.png" alt="Featured image of post 【归档】PVE 8 安装与优化" /&gt;&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;
&lt;p&gt;该文章还在CSDN发表，文章链接：&lt;a class=&#34;link&#34; href=&#34;https://blog.csdn.net/Dd_w606/article/details/140447411&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Link&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;pve镜像下载&#34;&gt;PVE镜像下载&lt;/h2&gt;
&lt;p&gt;1、在浏览器输入以下网址下载pve的iso安装镜像。
&lt;a class=&#34;link&#34; href=&#34;https://mirrors.tuna.tsinghua.edu.cn/proxmox/iso/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Download Proxmox VE&lt;/a&gt;
清华大学开源镜像站，下拉选择对应版本下载iso文件。&lt;/p&gt;
&lt;p&gt;2、制作系统引导盘&lt;/p&gt;
&lt;p&gt;这里使用rufus工具将ISO文件刻录进U盘&lt;/p&gt;
&lt;p&gt;Rufus&lt;a class=&#34;link&#34; href=&#34;https://wwf.lanzoul.com/i72bm24j105c&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;下载地址&lt;/a&gt;
（密码:5k8t）&lt;/p&gt;
&lt;p&gt;下载完成后直接双击运行，无需安装，设备中选择U盘，引导类型选择PVE镜像，然后点击开始，注意U盘中的原有数据会被格式化，重要数据记得备份。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 77; 
			flex-basis: 185px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/pveinstall/rufus.jpg&#34; data-size=&#34;407x528&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/pveinstall/rufus.jpg&#34;
			width=&#34;407&#34;
			height=&#34;528&#34;
			srcset=&#34;https://tflasp.fun/2024/pveinstall/rufus_hu9022114c45b0b968251779c450e3cec5_49544_480x0_resize_q75_box.jpg 480w, https://tflasp.fun/2024/pveinstall/rufus_hu9022114c45b0b968251779c450e3cec5_49544_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;Rufus&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;Rufus&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;注意:一定要使用DD模式写入！使用iso模式写入可能导致某些版本的镜像无法启动！&lt;/p&gt;
&lt;p&gt;当写盘完成时，显示准备就绪，即可关闭程序，弹出U盘，拔出U盘。&lt;/p&gt;
&lt;h2 id=&#34;pve-安装&#34;&gt;PVE 安装&lt;/h2&gt;
&lt;p&gt;1、打开主机电源，不断按键盘F12按键（不同主机的启动按键不同，请自行百度）选择由刚刚制作好的启动盘启动。&lt;/p&gt;
&lt;p&gt;2、进入PVE安装页面，选择第一个Install Proxmox VE （Graphical），按回车。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 382; 
			flex-basis: 918px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/pveinstall/pveinstaller.png&#34; data-size=&#34;612x160&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/pveinstall/pveinstaller.png&#34;
			width=&#34;612&#34;
			height=&#34;160&#34;
			srcset=&#34;https://tflasp.fun/2024/pveinstall/pveinstaller_hufe9653886b00745c7725dbc66e171966_53939_480x0_resize_box_3.png 480w, https://tflasp.fun/2024/pveinstall/pveinstaller_hufe9653886b00745c7725dbc66e171966_53939_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后会进入一段代码，此时不要作任何操作。&lt;/p&gt;
&lt;p&gt;3、进入下面页面安装正式开始，首先使用协议页面点击我同意。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 163; 
			flex-basis: 391px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/pveinstall/pve1.jpg&#34; data-size=&#34;728x446&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/pveinstall/pve1.jpg&#34;
			width=&#34;728&#34;
			height=&#34;446&#34;
			srcset=&#34;https://tflasp.fun/2024/pveinstall/pve1_hub24785e94cd7e6f41db6636150344cac_49630_480x0_resize_q75_box.jpg 480w, https://tflasp.fun/2024/pveinstall/pve1_hub24785e94cd7e6f41db6636150344cac_49630_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 163; 
			flex-basis: 393px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/pveinstall/pve2.jpg&#34; data-size=&#34;746x455&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/pveinstall/pve2.jpg&#34;
			width=&#34;746&#34;
			height=&#34;455&#34;
			srcset=&#34;https://tflasp.fun/2024/pveinstall/pve2_hu1acf53cfa78a1e4f90e9ff45384034d9_60377_480x0_resize_q75_box.jpg 480w, https://tflasp.fun/2024/pveinstall/pve2_hu1acf53cfa78a1e4f90e9ff45384034d9_60377_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;填写邮件，网卡选默认即可。&lt;/p&gt;
&lt;p&gt;Gateway是虚拟机网关，一般默认即可，然后点下一步设定密码。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 169; 
			flex-basis: 405px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/pveinstall/pve3.jpg&#34; data-size=&#34;531x314&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/pveinstall/pve3.jpg&#34;
			width=&#34;531&#34;
			height=&#34;314&#34;
			srcset=&#34;https://tflasp.fun/2024/pveinstall/pve3_hu2ceec3d3c2db0ec84a95090d1db699e7_28816_480x0_resize_q75_box.jpg 480w, https://tflasp.fun/2024/pveinstall/pve3_hu2ceec3d3c2db0ec84a95090d1db699e7_28816_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 150; 
			flex-basis: 360px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/pveinstall/pve4.jpg&#34; data-size=&#34;666x444&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/pveinstall/pve4.jpg&#34;
			width=&#34;666&#34;
			height=&#34;444&#34;
			srcset=&#34;https://tflasp.fun/2024/pveinstall/pve4_hue83c051bc6084a79c30f568f5a79db2e_54784_480x0_resize_q75_box.jpg 480w, https://tflasp.fun/2024/pveinstall/pve4_hue83c051bc6084a79c30f568f5a79db2e_54784_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 161; 
			flex-basis: 388px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/pveinstall/pve5.jpg&#34; data-size=&#34;523x323&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/pveinstall/pve5.jpg&#34;
			width=&#34;523&#34;
			height=&#34;323&#34;
			srcset=&#34;https://tflasp.fun/2024/pveinstall/pve5_hu4f2a19208fc4497b6b447bea3fb5a425_21241_480x0_resize_q75_box.jpg 480w, https://tflasp.fun/2024/pveinstall/pve5_hu4f2a19208fc4497b6b447bea3fb5a425_21241_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这一步后就等待安装，安装完毕后重启记得拔掉u盘。&lt;/p&gt;
&lt;p&gt;重启&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 336; 
			flex-basis: 807px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/pveinstall/pve6.jpg&#34; data-size=&#34;387x115&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/pveinstall/pve6.jpg&#34;
			width=&#34;387&#34;
			height=&#34;115&#34;
			srcset=&#34;https://tflasp.fun/2024/pveinstall/pve6_hu2ae12b08c970ac2a9f4fe45e11f4d670_8260_480x0_resize_q75_box.jpg 480w, https://tflasp.fun/2024/pveinstall/pve6_hu2ae12b08c970ac2a9f4fe45e11f4d670_8260_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;进入到这个界面是代表安装成功了。&lt;/p&gt;
&lt;h2 id=&#34;初始化pve&#34;&gt;初始化PVE&lt;/h2&gt;
&lt;p&gt;接下来到主力机上进行操作，输入刚刚安装成功显示的网址（如前一个图，网址为192.168.10.20:8006）&lt;/p&gt;
&lt;p&gt;注意输入时要带端口号，不然进不去。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 151; 
			flex-basis: 363px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/pveinstall/pve7.jpg&#34; data-size=&#34;759x501&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/pveinstall/pve7.jpg&#34;
			width=&#34;759&#34;
			height=&#34;501&#34;
			srcset=&#34;https://tflasp.fun/2024/pveinstall/pve7_hua3ca2b5c349893fc36ea85467d17b35b_42848_480x0_resize_q75_box.jpg 480w, https://tflasp.fun/2024/pveinstall/pve7_hua3ca2b5c349893fc36ea85467d17b35b_42848_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;继续访问，进入pve登录界面。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 160; 
			flex-basis: 384px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/pveinstall/pve8.jpg&#34; data-size=&#34;503x314&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/pveinstall/pve8.jpg&#34;
			width=&#34;503&#34;
			height=&#34;314&#34;
			srcset=&#34;https://tflasp.fun/2024/pveinstall/pve8_hu502096d5d5671b63054c6232b614f636_23804_480x0_resize_q75_box.jpg 480w, https://tflasp.fun/2024/pveinstall/pve8_hu502096d5d5671b63054c6232b614f636_23804_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;输入刚刚设置的密码，改为中文（非必须）即可进入pve，第一次登陆会显示无有效订阅，关闭即可。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 285; 
			flex-basis: 686px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/pveinstall/pve9.jpg&#34; data-size=&#34;506x177&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/pveinstall/pve9.jpg&#34;
			width=&#34;506&#34;
			height=&#34;177&#34;
			srcset=&#34;https://tflasp.fun/2024/pveinstall/pve9_hu3638dc0d8e472d78a5849a297b0f193e_13023_480x0_resize_q75_box.jpg 480w, https://tflasp.fun/2024/pveinstall/pve9_hu3638dc0d8e472d78a5849a297b0f193e_13023_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&#34;虚拟机直通设备&#34;&gt;虚拟机直通设备&lt;/h2&gt;
&lt;p&gt;首先在主板BIOS里查看是否开启了硬件虚拟化（通常在Advanced栏下），同时CPU也必须要支持虚拟化才行。Intel VT-D。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 241; 
			flex-basis: 579px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/pveinstall/pve10.jpg&#34; data-size=&#34;768x318&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/pveinstall/pve10.jpg&#34;
			width=&#34;768&#34;
			height=&#34;318&#34;
			srcset=&#34;https://tflasp.fun/2024/pveinstall/pve10_hu74c9828a0c0ef861f45d03445e0a54ab_60944_480x0_resize_q75_box.jpg 480w, https://tflasp.fun/2024/pveinstall/pve10_hu74c9828a0c0ef861f45d03445e0a54ab_60944_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如上图进入pve shell。&lt;/p&gt;
&lt;p&gt;输入&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nano /etc/default/grub
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;对于intel-cpu添加-intel_iommuon操作如下&#34;&gt;对于Intel CPU，添加 intel_iommu=on，操作如下：&lt;/h4&gt;
&lt;p&gt;2、找到：GRUB_CMDLINE_LINUX_DEFAULT=&amp;ldquo;quiet&amp;rdquo;&lt;/p&gt;
&lt;p&gt;然后修改为&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;GRUB_CMDLINE_LINUX_DEFAULT=&amp;quot;quiet intel_iommu=on&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;编辑完成后，使用快捷键 Ctrl + O 回车保存文件，Ctrl + X 退出编辑器。&lt;/p&gt;
&lt;p&gt;3、使用命令 update-grub 保存更改并更新grub&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;root@pve:~# update-grub
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;4、更新完成后，使用命令 reboot 重启PVE系统&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;root@pve:~# reboot
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;从命令行运行&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dmesg | grep -e DMAR -e IOMMU
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果没有输出，则说明有问题。&lt;/p&gt;
&lt;p&gt;如果有,可基本确认这个过程顺利完成! 接下来就可以为虚拟机正常的添加硬件直通了。&lt;/p&gt;
&lt;h4 id=&#34;对于amd-cpu&#34;&gt;对于AMD CPU&lt;/h4&gt;
&lt;p&gt;对于AMD CPU 添加 amd_iommu=on, 操作如下：&lt;/p&gt;
&lt;p&gt;1、Shell 里面输入命令：nano /etc/default/grub&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;root@pve:~# nano /etc/default/grub
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;2、在里面找到：GRUB_CMDLINE_LINUX_DEFAULT=&amp;ldquo;quiet&amp;rdquo;&lt;/p&gt;
&lt;p&gt;然后修改为&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;GRUB_CMDLINE_LINUX_DEFAULT=&amp;quot;quiet amd_iommu=on&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;编辑完成后，使用快捷键 Ctrl + O 回车保存文件，Ctrl + X 退出编辑器。&lt;/p&gt;
&lt;p&gt;3、使用命令 update-grub 保存更改并更新grub&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;root@pve:~# update-grub
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;4、更新完成后，使用命令 reboot 重启PVE系统&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;root@pve:~# reboot
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这样虚拟机直通设置就完成了。&lt;/p&gt;
&lt;p&gt;当然，也可以使用pvetools来进行pve环境下的优化设置操作，更加方便（需换源）&lt;/p&gt;
&lt;h2 id=&#34;虚拟机安装&#34;&gt;虚拟机安装&lt;/h2&gt;
&lt;p&gt;pve安装虚拟机还是非常简单的，本篇我们将使用pve安装win10来演示一下安装过程，其他系统安装大同小异。&lt;/p&gt;
&lt;p&gt;1、首先需要上传安装镜像，通过local(pve)→ISO镜像→上传，将win10镜像上传到pve中。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 237; 
			flex-basis: 569px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/pveinstall/pve11.jpg&#34; data-size=&#34;773x326&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/pveinstall/pve11.jpg&#34;
			width=&#34;773&#34;
			height=&#34;326&#34;
			srcset=&#34;https://tflasp.fun/2024/pveinstall/pve11_hu02bfa4a0b3fa7c2ca9d67f7858fc4d5e_29652_480x0_resize_q75_box.jpg 480w, https://tflasp.fun/2024/pveinstall/pve11_hu02bfa4a0b3fa7c2ca9d67f7858fc4d5e_29652_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;2、回到pve首页，点击右上角的创建虚拟机，常规中自定义虚拟机的名称&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 270; 
			flex-basis: 649px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/pveinstall/pve12.jpg&#34; data-size=&#34;768x284&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/pveinstall/pve12.jpg&#34;
			width=&#34;768&#34;
			height=&#34;284&#34;
			srcset=&#34;https://tflasp.fun/2024/pveinstall/pve12_hu96dfe6a9295b615d9d64b6705bb10d7f_28135_480x0_resize_q75_box.jpg 480w, https://tflasp.fun/2024/pveinstall/pve12_hu96dfe6a9295b615d9d64b6705bb10d7f_28135_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;3、操作系统中选择windows10镜像，然后在类型中选择安装操作系统的类型，注意版本也要选择。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 261; 
			flex-basis: 628px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/pveinstall/pve13.jpg&#34; data-size=&#34;772x295&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/pveinstall/pve13.jpg&#34;
			width=&#34;772&#34;
			height=&#34;295&#34;
			srcset=&#34;https://tflasp.fun/2024/pveinstall/pve13_hub0c87ce57345371923d29d2a48e9dd81_46281_480x0_resize_q75_box.jpg 480w, https://tflasp.fun/2024/pveinstall/pve13_hub0c87ce57345371923d29d2a48e9dd81_46281_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;4、系统保持默认即可。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 353; 
			flex-basis: 848px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/pveinstall/pve14.jpg&#34; data-size=&#34;764x216&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/pveinstall/pve14.jpg&#34;
			width=&#34;764&#34;
			height=&#34;216&#34;
			srcset=&#34;https://tflasp.fun/2024/pveinstall/pve14_hu2c5259a851325227a15596e602d27853_21677_480x0_resize_q75_box.jpg 480w, https://tflasp.fun/2024/pveinstall/pve14_hu2c5259a851325227a15596e602d27853_21677_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;5、硬盘中总线选择sata，其他保持默认。（当然SCSI、IDE等等都行的）&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 143; 
			flex-basis: 343px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/pveinstall/pve15.jpg&#34; data-size=&#34;771x538&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/pveinstall/pve15.jpg&#34;
			width=&#34;771&#34;
			height=&#34;538&#34;
			srcset=&#34;https://tflasp.fun/2024/pveinstall/pve15_hu24775b9d217cd648832fa5ba6dfa19ae_35119_480x0_resize_q75_box.jpg 480w, https://tflasp.fun/2024/pveinstall/pve15_hu24775b9d217cd648832fa5ba6dfa19ae_35119_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;6、CPU根据机器配置选择，插槽表示cpu个数单CPU机器输入1，核心根据CPU选择，类别使用HOST系统性能最大化。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 384; 
			flex-basis: 922px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/pveinstall/pve16.jpg&#34; data-size=&#34;773x201&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/pveinstall/pve16.jpg&#34;
			width=&#34;773&#34;
			height=&#34;201&#34;
			srcset=&#34;https://tflasp.fun/2024/pveinstall/pve16_hu6aae2a4c467a857f79ba6a5d5d7f8b8e_27227_480x0_resize_q75_box.jpg 480w, https://tflasp.fun/2024/pveinstall/pve16_hu6aae2a4c467a857f79ba6a5d5d7f8b8e_27227_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;7、内存根据机器配置以及具体需求设置。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 428; 
			flex-basis: 1029px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/pveinstall/pve17.jpg&#34; data-size=&#34;759x177&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/pveinstall/pve17.jpg&#34;
			width=&#34;759&#34;
			height=&#34;177&#34;
			srcset=&#34;https://tflasp.fun/2024/pveinstall/pve17_hu57531c6c14e1a55e8fb902e2f78ff41b_15034_480x0_resize_q75_box.jpg 480w, https://tflasp.fun/2024/pveinstall/pve17_hu57531c6c14e1a55e8fb902e2f78ff41b_15034_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;8、网络设置中选择兼容性最高的e1000即可。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 309; 
			flex-basis: 742px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/pveinstall/pve18.jpg&#34; data-size=&#34;767x248&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/pveinstall/pve18.jpg&#34;
			width=&#34;767&#34;
			height=&#34;248&#34;
			srcset=&#34;https://tflasp.fun/2024/pveinstall/pve18_hu877fb474b0f6f7fba8f5f56fc689d5c9_24247_480x0_resize_q75_box.jpg 480w, https://tflasp.fun/2024/pveinstall/pve18_hu877fb474b0f6f7fba8f5f56fc689d5c9_24247_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;9、最后检查配置没有，确认无误后点击完成。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 141; 
			flex-basis: 340px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/pveinstall/pve19.jpg&#34; data-size=&#34;776x547&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/pveinstall/pve19.jpg&#34;
			width=&#34;776&#34;
			height=&#34;547&#34;
			srcset=&#34;https://tflasp.fun/2024/pveinstall/pve19_hub1f3d015def93a1d4c84965df41b641e_61164_480x0_resize_q75_box.jpg 480w, https://tflasp.fun/2024/pveinstall/pve19_hub1f3d015def93a1d4c84965df41b641e_61164_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;10、稍等几秒，机器创建成功。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 205; 
			flex-basis: 492px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/pveinstall/pve20.jpg&#34; data-size=&#34;773x377&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/pveinstall/pve20.jpg&#34;
			width=&#34;773&#34;
			height=&#34;377&#34;
			srcset=&#34;https://tflasp.fun/2024/pveinstall/pve20_hu50d96014c3395628cd56018edea6adf8_44636_480x0_resize_q75_box.jpg 480w, https://tflasp.fun/2024/pveinstall/pve20_hu50d96014c3395628cd56018edea6adf8_44636_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;11、点击控制台启动，按照正常windows系统安装流程安装即可。&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 147; 
			flex-basis: 354px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2024/pveinstall/pve21.jpg&#34; data-size=&#34;762x516&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2024/pveinstall/pve21.jpg&#34;
			width=&#34;762&#34;
			height=&#34;516&#34;
			srcset=&#34;https://tflasp.fun/2024/pveinstall/pve21_huac9baecf74c17d38443fe5b784fed325_52090_480x0_resize_q75_box.jpg 480w, https://tflasp.fun/2024/pveinstall/pve21_huac9baecf74c17d38443fe5b784fed325_52090_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>【归档】Hugo | 使用Hugo&#43;Stack主题搭建博客</title>
        <link>https://tflasp.fun/2024/hugo-stack/</link>
        <pubDate>Thu, 11 Jul 2024 00:00:00 +0000</pubDate>
        
        <guid>https://tflasp.fun/2024/hugo-stack/</guid>
        <description>&lt;img src="https://tflasp.fun/2024/hugo-stack/hugo.jpg" alt="Featured image of post 【归档】Hugo | 使用Hugo&#43;Stack主题搭建博客" /&gt;&lt;p&gt;Github仓库地址：&lt;a class=&#34;link&#34; href=&#34;https://github.com/CaiJimmy/hugo-theme-stack&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;hugo-stack-theme&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;
&lt;h2 id=&#34;使用方式&#34;&gt;使用方式&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;从零建立博客&lt;/strong&gt;：Fork仓库到自己账号下，用Github 注册 Vercel，依次点击Overview → New Project → import刚刚Fork的仓库，设置&lt;code&gt;FRAMEWORK PRESET&lt;/code&gt;为Hugo → 点击&lt;code&gt;Environment Variables&lt;/code&gt;，设置&lt;code&gt;NAME&lt;/code&gt;为&lt;code&gt;HUGO_VERSION&lt;/code&gt;，&lt;code&gt;Value&lt;/code&gt;为&lt;code&gt;Hugo版本号（如0.89.0）&lt;/code&gt; → 点击Add → 点击Deploy，稍等十来秒即可部署完成。下载仓库到本地后使用Github Desktop更新文章。（注，本地预览需安装Hugo，Powershell里输入Choco install hugo-extended）&lt;/p&gt;
&lt;br&gt;
&lt;h3 id=&#34;友情链接使用方式&#34;&gt;友情链接使用方式&lt;/h3&gt;
&lt;p&gt;友链头像放在&lt;code&gt;/assets/link-img&lt;/code&gt;，友链数据放在&lt;code&gt;/data/links.json&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[
    {
        &amp;quot;title&amp;quot;: &amp;quot;Friends&amp;quot;,
        &amp;quot;website&amp;quot;: &amp;quot;https://mantyke.icu/&amp;quot;,
        &amp;quot;image&amp;quot;: &amp;quot;mantyke.png&amp;quot;,
     &amp;quot;description&amp;quot;: &amp;quot;Description&amp;quot;
    },
	{
        &amp;quot;title&amp;quot;: &amp;quot;友情链接2&amp;quot;,
        &amp;quot;website&amp;quot;: &amp;quot;&amp;quot;,
        &amp;quot;image&amp;quot;: &amp;quot;&amp;quot;,
     &amp;quot;description&amp;quot;: &amp;quot;&amp;quot;
    }
]
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;h3 id=&#34;修改页尾信息&#34;&gt;修改页尾信息&lt;/h3&gt;
&lt;p&gt;站点名称及建站时间请修改以下代码&lt;/p&gt;
&lt;p&gt;站点名称及链接：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#位置：layout/partials/footer/footer.html

    &amp;lt;section class=&amp;quot;copyright&amp;quot;&amp;gt;
        &amp;amp;copy; 
        {{ if and (.Site.Params.footer.since) (ne .Site.Params.footer.since (int (now.Format &amp;quot;2006&amp;quot;))) }}
            {{ .Site.Params.footer.since }} - 
        {{ end }}
        {{ now.Format &amp;quot;2006&amp;quot; }} &amp;lt;a href=&amp;quot;https://stack-theme-mod.vercel.app/&amp;quot;&amp;gt;Example Site&amp;lt;/a&amp;gt;·&amp;lt;i class=&amp;quot;fas fa-bell&amp;quot;&amp;gt;&amp;lt;/i&amp;gt; &amp;lt;a id=&amp;quot;days&amp;quot;&amp;gt;0&amp;lt;/a&amp;gt;Days&amp;lt;br&amp;gt;
      {{$var :=  $scratch.Get &amp;quot;total&amp;quot;}}{{$var = div $var 100.0}}{{$var = math.Ceil $var}}{{$var = div $var 10.0}}共书写了{{$var}}k字·共 {{ len (where .Site.RegularPages &amp;quot;Section&amp;quot; &amp;quot;post&amp;quot;) }}篇文章&amp;lt;/br&amp;gt;&amp;lt;span&amp;gt;&amp;lt;p&amp;gt;
    &amp;lt;/section&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;#位置：layout/partials/footer/footer.html

var s1 = &#39;2022-02-13&#39;;//设置为建站时间
s1 = new Date(s1.replace(/-/g, &amp;quot;/&amp;quot;));
s2 = new Date();
var days = s2.getTime() - s1.getTime();
var number_of_days = parseInt(days / (1000 * 60 * 60 * 24));
document.getElementById(&#39;days&#39;).innerHTML = number_of_days;
&lt;/code&gt;&lt;/pre&gt;
&lt;br&gt;
&lt;h2 id=&#34;其他常见修改&#34;&gt;其他常见修改&lt;/h2&gt;
&lt;h3 id=&#34;设置博客头像&#34;&gt;设置博客头像&lt;/h3&gt;
&lt;p&gt;位置：&lt;code&gt;/assets/img&lt;/code&gt;，请将头像命名为&lt;code&gt;avatar.png&lt;/code&gt;，替换原头像文件&lt;/p&gt;
&lt;h3 id=&#34;删除博客头像&#34;&gt;删除博客头像&lt;/h3&gt;
&lt;p&gt;位置：&lt;code&gt;/layouts/partials/sidebar/left.html&lt;/code&gt;，注释或删去以下部分：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;        {{ with .Site.Params.sidebar.avatar }}
            {{ if (default true .enabled) }}
            &amp;lt;figure class=&amp;quot;site-avatar&amp;quot;&amp;gt;
                &amp;lt;a href=&amp;quot;{{ .Site.BaseURL | relLangURL }}&amp;quot;&amp;gt;
                {{ if not .local }}
                    &amp;lt;img src=&amp;quot;{{ .src }}&amp;quot; width=&amp;quot;300&amp;quot; height=&amp;quot;300&amp;quot; class=&amp;quot;site-logo&amp;quot; loading=&amp;quot;lazy&amp;quot; alt=&amp;quot;Avatar&amp;quot;&amp;gt;
                {{ else }}
                    {{ $avatar := resources.Get (.src) }}
                    
                    {{ if $avatar }}
                        {{ $avatarResized := $avatar.Resize &amp;quot;300x&amp;quot; }}
                        &amp;lt;img src=&amp;quot;{{ $avatarResized.RelPermalink }}&amp;quot; width=&amp;quot;{{ $avatarResized.Width }}&amp;quot;
                            height=&amp;quot;{{ $avatarResized.Height }}&amp;quot; class=&amp;quot;site-logo&amp;quot; loading=&amp;quot;lazy&amp;quot; alt=&amp;quot;Avatar&amp;quot;&amp;gt;
                    {{ else }}
                        {{ errorf &amp;quot;Failed loading avatar from %q&amp;quot; . }}
                    {{ end }}
                {{ end }}
                &amp;lt;/a&amp;gt;
                {{ with $.Site.Params.sidebar.emoji }}
                    &amp;lt;span class=&amp;quot;emoji&amp;quot;&amp;gt;{{ . }}&amp;lt;/span&amp;gt;
                {{ end }}
            &amp;lt;/figure&amp;gt;
            {{ end }}
        {{ end }}
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;修改博客背景颜色&#34;&gt;修改博客背景颜色&lt;/h3&gt;
&lt;p&gt;位置：&lt;code&gt;assets\scss\variables.scss&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;--body-background: #f6f6f6;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;指定首页分类标签颜色&#34;&gt;指定首页分类标签颜色&lt;/h3&gt;
&lt;p&gt;位置：&lt;code&gt;content\categories&lt;/code&gt;，创建分类同名文件夹后，在文件夹内创建&lt;code&gt;_index.md&lt;/code&gt;文件，写入frontmatter&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;title: &amp;quot;class&amp;quot; //分类名称
description: &amp;quot;简介&amp;quot; //简介
image: &amp;quot;image.png&amp;quot; //分类题图
style:
    background: &amp;quot;#80aba9&amp;quot; //分类标签底色
    color: &amp;quot;#fff&amp;quot;
---
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;配置各类图标&#34;&gt;配置各类图标&lt;/h3&gt;
&lt;p&gt;图标放在：&lt;code&gt;/assets/icons&lt;/code&gt;，svg格式。&lt;/p&gt;
&lt;br&gt;
</description>
        </item>
        <item>
        <title>Windows下使用批处理文件清除缓存</title>
        <link>https://tflasp.fun/2021/cache_cleaner/</link>
        <pubDate>Thu, 11 Nov 2021 00:00:00 +0000</pubDate>
        
        <guid>https://tflasp.fun/2021/cache_cleaner/</guid>
        <description>&lt;p&gt;新建一个文本文档，更改后缀为bat，右键编辑输入以下内容，保存、运行。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@echo off echo 
正在清除缓存
del /f /s /q %systemdrive%\*.tmp 
del /f /s /q %systemdrive%\*._mp 
del /f /s /q %systemdrive%\*.log 
del /f /s /q %systemdrive%\*.gid 
del /f /s /q %systemdrive%\*.chk 
del /f /s /q %systemdrive%\*.old 
del /f /s /q %systemdrive%\recycled\*.* 
del /f /s /q %windir%\*.bak 
del /f /s /q %windir%\prefetch\*.* 
rd /s /q %windir%\temp &amp;amp; md %windir%\temp 
del /f /q %userprofile%\cookies\*.* 
del /f /q %userprofile%\recent\*.* 
del /f /s /q &amp;quot;%userprofile%\Local Settings\Temporary Internet Files\*.*&amp;quot; 
del /f /s /q &amp;quot;%userprofile%\Local Settings\Temp\*.*&amp;quot; 
del /f /s /q &amp;quot;%userprofile%\recent\*.*&amp;quot; echo 
清除完成！ 
echo. &amp;amp; pause
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
        <item>
        <title>安装与激活Microsoft Office</title>
        <link>https://tflasp.fun/2021/officeinstall/</link>
        <pubDate>Sun, 10 Oct 2021 00:00:00 +0000</pubDate>
        
        <guid>https://tflasp.fun/2021/officeinstall/</guid>
        <description>&lt;img src="https://tflasp.fun/2021/officeinstall/office1.jpg" alt="Featured image of post 安装与激活Microsoft Office" /&gt;&lt;p&gt;​&lt;/p&gt;
&lt;p&gt;所需工具：【office安装工具】Office Tool Plus(OTP),[Windows desktop runtime x 86]，一台联网计算机&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本文章所提及的所有文件：OTP,Windows desktop runtime，我已经上传到主页，可以自行下载体验！，支持正版，请到&lt;/strong&gt;&lt;a class=&#34;link&#34; href=&#34;https://www.microsoft.com/zh-cn/microsoft-365/buy/microsoft-365&#34;  title=&#34;此处&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;此处&lt;/a&gt;&lt;strong&gt;购买正版Office&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一：安装Office 365&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;首先安装Windows desktop runtime X86&lt;/p&gt;
&lt;p&gt;然后双击运行OTP，同意许可条款&lt;/p&gt;
&lt;p&gt;点击部署，添加产品&lt;/p&gt;
&lt;p&gt;选择365 应用企业版，在右侧选择你的体系结构，通道建议选择测试通道，这样Office就有了新的启动UI~&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 172; 
			flex-basis: 413px&#34;
	&gt;
	&lt;a href=&#34;https://tflasp.fun/2021/officeinstall/office1.jpg&#34; data-size=&#34;901x523&#34;&gt;
		&lt;img src=&#34;https://tflasp.fun/2021/officeinstall/office1.jpg&#34;
			width=&#34;901&#34;
			height=&#34;523&#34;
			srcset=&#34;https://tflasp.fun/2021/officeinstall/office1_huef74ab535c7b344634e4ad90e98a5055_85467_480x0_resize_q75_box.jpg 480w, https://tflasp.fun/2021/officeinstall/office1_huef74ab535c7b344634e4ad90e98a5055_85467_1024x0_resize_q75_box.jpg 1024w&#34;
			loading=&#34;lazy&#34;
			&gt;
	&lt;/a&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;点击开始部署，然后保持你的联机状态，office会自动下载并安装，安装完成后会有一个通知（下载安装速度取决于你的网速和RAM大小），安装完成后关闭红色的office部署工具，再次进入OTP，点击左上角的返回回到主页&lt;/p&gt;
&lt;p&gt;**二：激活 **&lt;/p&gt;
&lt;p&gt;在主页里找到“激活”，进入后安装许可证：“Office mondo 2016-批量许可证”，点击安装许可证。&lt;/p&gt;
&lt;p&gt;在上方有一个类似于命令提示符的图标，打开输入以下指令：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/osppilbyid MondoVolume /osppsethst:kms.loli.beer /osppsetprt:1688 /osppact
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;按回车，右下角会有“OSPP正在运行”，等待完成，Office就激活了，激活是有一定时效的，一般是180天，激活失效后再OTP里-激活-清除许可证，然后再复制命令粘贴到命令行里就能再次激活了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;三：使用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本文章所提及的所有文件：OTP,Windows desktop runtime，我已经上传到主页，可以自行下载，支持正版！&lt;/strong&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Markdown Syntax Guide</title>
        <link>https://tflasp.fun/2020/markdown-syntax-guide/</link>
        <pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate>
        
        <guid>https://tflasp.fun/2020/markdown-syntax-guide/</guid>
        <description>&lt;img src="https://tflasp.fun/2020/markdown-syntax-guide/pawel-czerwinski-8uZPynIu-rQ-unsplash.jpg" alt="Featured image of post Markdown Syntax Guide" /&gt;&lt;p&gt;This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.&lt;/p&gt;
&lt;h2 id=&#34;headings&#34;&gt;Headings&lt;/h2&gt;
&lt;p&gt;The following HTML &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;—&lt;code&gt;&amp;lt;h6&amp;gt;&lt;/code&gt; elements represent six levels of section headings. &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; is the highest section level while &lt;code&gt;&amp;lt;h6&amp;gt;&lt;/code&gt; is the lowest.&lt;/p&gt;
&lt;h1 id=&#34;h1&#34;&gt;H1&lt;/h1&gt;
&lt;h2 id=&#34;h2&#34;&gt;H2&lt;/h2&gt;
&lt;h3 id=&#34;h3&#34;&gt;H3&lt;/h3&gt;
&lt;h4 id=&#34;h4&#34;&gt;H4&lt;/h4&gt;
&lt;h5 id=&#34;h5&#34;&gt;H5&lt;/h5&gt;
&lt;h6 id=&#34;h6&#34;&gt;H6&lt;/h6&gt;
&lt;h2 id=&#34;paragraph&#34;&gt;Paragraph&lt;/h2&gt;
&lt;p&gt;Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.&lt;/p&gt;
&lt;p&gt;Itatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.&lt;/p&gt;
&lt;h2 id=&#34;blockquotes&#34;&gt;Blockquotes&lt;/h2&gt;
&lt;p&gt;The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a &lt;code&gt;footer&lt;/code&gt; or &lt;code&gt;cite&lt;/code&gt; element, and optionally with in-line changes such as annotations and abbreviations.&lt;/p&gt;
&lt;h4 id=&#34;blockquote-without-attribution&#34;&gt;Blockquote without attribution&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;Tiam, ad mint andaepu dandae nostion secatur sequo quae.
&lt;strong&gt;Note&lt;/strong&gt; that you can use &lt;em&gt;Markdown syntax&lt;/em&gt; within a blockquote.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;blockquote-with-attribution&#34;&gt;Blockquote with attribution&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;Don&amp;rsquo;t communicate by sharing memory, share memory by communicating.&lt;br&gt;
— &lt;cite&gt;Rob Pike&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;tables&#34;&gt;Tables&lt;/h2&gt;
&lt;p&gt;Tables aren&amp;rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Age&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Bob&lt;/td&gt;
&lt;td&gt;27&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Alice&lt;/td&gt;
&lt;td&gt;23&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;inline-markdown-within-tables&#34;&gt;Inline Markdown within tables&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Italics&lt;/th&gt;
&lt;th&gt;Bold&lt;/th&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;italics&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;bold&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;code&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;A&lt;/th&gt;
&lt;th&gt;B&lt;/th&gt;
&lt;th&gt;C&lt;/th&gt;
&lt;th&gt;D&lt;/th&gt;
&lt;th&gt;E&lt;/th&gt;
&lt;th&gt;F&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit.&lt;/td&gt;
&lt;td&gt;Phasellus ultricies, sapien non euismod aliquam, dui ligula tincidunt odio, at accumsan nulla sapien eget ex.&lt;/td&gt;
&lt;td&gt;Proin eleifend dictum ipsum, non euismod ipsum pulvinar et. Vivamus sollicitudin, quam in pulvinar aliquam, metus elit pretium purus&lt;/td&gt;
&lt;td&gt;Proin sit amet velit nec enim imperdiet vehicula.&lt;/td&gt;
&lt;td&gt;Ut bibendum vestibulum quam, eu egestas turpis gravida nec&lt;/td&gt;
&lt;td&gt;Sed scelerisque nec turpis vel viverra. Vivamus vitae pretium sapien&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;code-blocks&#34;&gt;Code Blocks&lt;/h2&gt;
&lt;h4 id=&#34;code-block-with-backticks&#34;&gt;Code block with backticks&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
  &amp;lt;title&amp;gt;Example HTML5 Document&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;p&amp;gt;Test&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;code-block-indented-with-four-spaces&#34;&gt;Code block indented with four spaces&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;
&amp;lt;head&amp;gt;
  &amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;
  &amp;lt;title&amp;gt;Example HTML5 Document&amp;lt;/title&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
  &amp;lt;p&amp;gt;Test&amp;lt;/p&amp;gt;
&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;code-block-with-hugos-internal-highlight-shortcode&#34;&gt;Code block with Hugo&amp;rsquo;s internal highlight shortcode&lt;/h4&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;!doctype html&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;lang&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;en&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;meta&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;charset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;utf-8&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Example HTML5 Document&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Test&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h4 id=&#34;diff-code-block&#34;&gt;Diff code block&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;[dependencies.bevy]
git = &amp;quot;https://github.com/bevyengine/bevy&amp;quot;
rev = &amp;quot;11f52b8c72fc3a568e8bb4a4cd1f3eb025ac2e13&amp;quot;
- features = [&amp;quot;dynamic&amp;quot;]
+ features = [&amp;quot;jpeg&amp;quot;, &amp;quot;dynamic&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;list-types&#34;&gt;List Types&lt;/h2&gt;
&lt;h4 id=&#34;ordered-list&#34;&gt;Ordered List&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;First item&lt;/li&gt;
&lt;li&gt;Second item&lt;/li&gt;
&lt;li&gt;Third item&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;unordered-list&#34;&gt;Unordered List&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;List item&lt;/li&gt;
&lt;li&gt;Another item&lt;/li&gt;
&lt;li&gt;And another item&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;nested-list&#34;&gt;Nested list&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Fruit
&lt;ul&gt;
&lt;li&gt;Apple&lt;/li&gt;
&lt;li&gt;Orange&lt;/li&gt;
&lt;li&gt;Banana&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Dairy
&lt;ul&gt;
&lt;li&gt;Milk&lt;/li&gt;
&lt;li&gt;Cheese&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;other-elements--abbr-sub-sup-kbd-mark&#34;&gt;Other Elements — abbr, sub, sup, kbd, mark&lt;/h2&gt;
&lt;p&gt;&lt;abbr title=&#34;Graphics Interchange Format&#34;&gt;GIF&lt;/abbr&gt; is a bitmap image format.&lt;/p&gt;
&lt;p&gt;H&lt;sub&gt;2&lt;/sub&gt;O&lt;/p&gt;
&lt;p&gt;X&lt;sup&gt;n&lt;/sup&gt; + Y&lt;sup&gt;n&lt;/sup&gt; = Z&lt;sup&gt;n&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;Press &lt;kbd&gt;&lt;kbd&gt;CTRL&lt;/kbd&gt;+&lt;kbd&gt;ALT&lt;/kbd&gt;+&lt;kbd&gt;Delete&lt;/kbd&gt;&lt;/kbd&gt; to end the session.&lt;/p&gt;
&lt;p&gt;Most &lt;mark&gt;salamanders&lt;/mark&gt; are nocturnal, and hunt for insects, worms, and other small creatures.&lt;/p&gt;
&lt;h2 id=&#34;hyperlinked-image&#34;&gt;Hyperlinked image&lt;/h2&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://google.com&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;&lt;figure 
	&gt;
	&lt;a href=&#34;https://www.google.com/images/branding/googlelogo/1x/googlelogo_light_color_272x92dp.png&#34; &gt;
		&lt;img src=&#34;https://www.google.com/images/branding/googlelogo/1x/googlelogo_light_color_272x92dp.png&#34;
			
			
			
			loading=&#34;lazy&#34;
			alt=&#34;Google&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;Google&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;
&lt;p&gt;The above quote is excerpted from Rob Pike&amp;rsquo;s &lt;a class=&#34;link&#34; href=&#34;https://www.youtube.com/watch?v=PAAkCSZUG1c&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;talk&lt;/a&gt; during Gopherfest, November 18, 2015.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
        </item>
        <item>
        <title>Math Typesetting</title>
        <link>https://tflasp.fun/2020/math-typesetting/</link>
        <pubDate>Wed, 01 Jan 2020 00:00:00 +0000</pubDate>
        
        <guid>https://tflasp.fun/2020/math-typesetting/</guid>
        <description>&lt;p&gt;Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.&lt;/p&gt;
&lt;p&gt;In this example we will be using &lt;a class=&#34;link&#34; href=&#34;https://katex.org/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;KaTeX&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a partial under &lt;code&gt;/layouts/partials/math.html&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Within this partial reference the &lt;a class=&#34;link&#34; href=&#34;https://katex.org/docs/autorender.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Auto-render Extension&lt;/a&gt; or host these scripts locally.&lt;/li&gt;
&lt;li&gt;Include the partial in your templates like so:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;{{ if or .Params.math .Site.Params.math }}
{{ partial &amp;quot;math.html&amp;quot; . }}
{{ end }}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;To enable KaTex globally set the parameter &lt;code&gt;math&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; in a project&amp;rsquo;s configuration&lt;/li&gt;
&lt;li&gt;To enable KaTex on a per page basis include the parameter &lt;code&gt;math: true&lt;/code&gt; in content files&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Use the online reference of &lt;a class=&#34;link&#34; href=&#34;https://katex.org/docs/supported.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Supported TeX Functions&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;examples&#34;&gt;Examples&lt;/h3&gt;

&lt;p&gt;Block math:
$$
\varphi = 1+\frac{1} {1+\frac{1} {1+\frac{1} {1+\cdots} } }
$$&lt;/p&gt;</description>
        </item>
        
    </channel>
</rss>
